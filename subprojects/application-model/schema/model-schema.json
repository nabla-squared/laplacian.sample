


{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Domain model definition for the metamodel project.",
  "description": "Domain model definition for the metamodel project.",
  "type": "object",
  "required": [],
  "properties": {
    "api_call_arguments": {
      "description": "An entity describing a api_call_argument.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.ApiCallArgument"
      }
    }
    ,
    "cache_policies": {
      "description": "An entity describing a cache_policy.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.cache.CachePolicy"
      }
    }
    ,
    "data_files": {
      "description": "An entity describing a data_file.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.data_file.DataFile"
      }
    }
    ,
    "datasources": {
      "description": "A *DataSource* represents an interface through which a client application access to a data store.\nThis includes the following models.\n- The entity that the datastore exposes to the client\n- Statement issued by the client to the datastore",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.datasource.Datasource"
      }
    }
    ,
    "datasource_entries": {
      "description": "An entity describing a datasource_entry.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.datasource.DatasourceEntry"
      }
    }
    ,
    "durations": {
      "description": "An entity describing a duration.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.Duration"
      }
    }
    ,
    "bucket_script_paths": {
      "description": "An entity describing a bucket_script_path.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.BucketScriptPath"
      }
    }
    ,
    "field_sorts": {
      "description": "An entity describing a field_sort.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.FieldSort"
      }
    }
    ,
    "date_histogram_extended_boundses": {
      "description": "An entity describing a date_histogram_extended_bounds.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramExtendedBounds"
      }
    }
    ,
    "date_histogram_intervals": {
      "description": "An entity describing a date_histogram_interval.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramInterval"
      }
    }
    ,
    "aggregate_group_ranges": {
      "description": "An entity describing a aggregate_group_range.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.AggregateGroupRange"
      }
    }
    ,
    "keyed_filters": {
      "description": "An entity describing a keyed_filter.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.KeyedFilter"
      }
    }
    ,
    "elasticsearch_aggregates": {
      "description": "An entity describing a elasticsearch_aggregate.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
      }
    }
    ,
    "elasticsearch_indexes": {
      "description": "An entity describing a elasticsearch_index.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.ElasticsearchIndex"
      }
    }
    ,
    "elasticsearch_index_sorts": {
      "description": "An entity describing a elasticsearch_index_sort.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.ElasticsearchIndexSort"
      }
    }
    ,
    "elasticsearch_query_predicates": {
      "description": "An entity describing a elasticsearch_query_predicate.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate"
      }
    }
    ,
    "elasticsearch_query_sorts": {
      "description": "An entity describing a elasticsearch_query_sort.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQuerySort"
      }
    }
    ,
    "elasticsearch_queries": {
      "description": "An entity describing a elasticsearch_query.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.ElasticsearchQuery"
      }
    }
    ,
    "graphql_types": {
      "description": "An entity describing a graphql_type.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlType"
      }
    }
    ,
    "argument_assignments": {
      "description": "An entity describing a argument_assignment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.ArgumentAssignment"
      }
    }
    ,
    "argument_assignment_values": {
      "description": "An entity describing a argument_assignment_value.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.ArgumentAssignmentValue"
      }
    }
    ,
    "rest_operation_responses": {
      "description": "An entity describing a rest_operation_response.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestOperationResponse"
      }
    }
    ,
    "rest_request_parameters": {
      "description": "An entity describing a rest_request_parameter.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestRequestParameter"
      }
    }
    ,
    "rest_resources": {
      "description": "An entity describing a rest_resource.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestResource"
      }
    }
    ,
    "services": {
      "description": "An entity describing a service.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.Service"
      }
    }
    ,
    "elastic_search_clients": {
      "description": "An entity describing a elastic_search_client.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.ElasticSearchClient"
      }
    }
    ,
    "service_configurations": {
      "description": "An entity describing a service_configuration.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.ServiceConfiguration"
      }
    }
    ,
    "configuration_bindings": {
      "description": "An entity describing a configuration_binding.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.backend.api.ConfigurationBinding"
      }
    }
    ,
    "components": {
      "description": "An entity describing a component.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.component.Component"
      }
    }
    ,
    "environment_variable_definitions": {
      "description": "An entity describing a environment_variable_definition.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.component.container.EnvironmentVariableDefinition"
      }
    }
    ,
    "configuration_files": {
      "description": "An entity describing a configuration_file.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.component.elasticsearch.ConfigurationFile"
      }
    }
    ,
    "maven_artifacts": {
      "description": "An entity describing a maven_artifact.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.component.MavenArtifact"
      }
    }
    ,
    "redis_container_deployments": {
      "description": "An entity describing a redis_container_deployment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.component.redis.RedisContainerDeployment"
      }
    }
    ,
    "redis_container_images": {
      "description": "An entity describing a redis_container_image.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.component.redis.RedisContainerImage"
      }
    }
    ,
    "datasets": {
      "description": "An entity describing a dataset.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.Dataset"
      }
    }
    ,
    "data_files": {
      "description": "An entity describing a data_file.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DataFile"
      }
    }
    ,
    "initial_table_datas": {
      "description": "An entity describing a initial_table_data.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.container.InitialTableData"
      }
    }
    ,
    "datasource_configurations": {
      "description": "An entity describing a datasource_configuration.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.DatasourceConfiguration"
      }
    }
    ,
    "environments": {
      "description": "An entity describing a environment.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.arch.deployment.Environment"
      }
    }
    ,
    "entities": {
      "description": "An entity describing a entity.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.metamodel.Entity"
      }
    }
    ,
    "value_domain_types": {
      "description": "An entity describing a value_domain_type.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/entities/laplacian.metamodel.ValueDomainType"
      }
    }
  },
  "definitions": {
    "value_domain_types": {
      "file_path": {
        "description": "file_path",
        "pattern": "^^(.+)\\/([^\\/]+)$$",
        "type": "string"
      },
      "http_method_for_rest": {
        "description": "http_method_for_rest",
        "enum":[
           "GET",
           "POST",
           "PUT",
           "PATCH",
           "DELETE"
        ],
        "type": "string"
      },
      "integer_or_placeholder": {
        "description": "integer_or_placeholder",
        "pattern": "^\\$\\{[^}]*\\}|[1-9][0-9]*|0$",
        "type": "string"
      },
      "service_configuration_name": {
        "description": "service_configuration_name",
        "pattern": "^[a-z]+(-[0-9a-z]+)*$",
        "type": "string"
      },
      "service_configuration_category": {
        "description": "service_configuration_category",
        "pattern": "^[a-z][-a-z0-9]*(\\.[a-z][-a-z0-9]*)*$",
        "type": "string"
      },
      "sort_order_or_placeholder": {
        "description": "sort_order_or_placeholder",
        "pattern": "^\\$\\{[^}]*\\}|asc|desc$",
        "type": "string"
      },
      "url_path_with_placeholders": {
        "description": "url_path_with_placeholders",
        "pattern": "^(/[-$_a-zA-Z0-9]*|/\\{[_$a-zA-Z][_$a-zA-Z0-9]*\\})+$",
        "type": "string"
      },
      "basic_type": {
        "description": "basic scalar type",
        "enum":[
           "string",
           "boolean",
           "number",
           "int",
           "float",
           "double",
           "date",
           "time",
           "datetime",
           "any_entity"
        ],
        "type": "string"
      },
      "identifier": {
        "description": "主要言語で識別子として使用可能な文字列",
        "pattern": "^[_$a-zA-Z][_$a-zA-Z0-9]*$",
        "type": "string"
      },
      "namespace": {
        "description": "名前空間",
        "pattern": "^[_a-zA-Z][_$a-zA-Z0-9]*(\\.[_a-zA-Z][_$a-zA-Z0-9]*)*$",
        "type": "string"
      }
    },
    "entities": {
      "laplacian.arch.backend.api.ApiCallArgument": {
        "description": "An entity describing a api_call_argument.",
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "api_call_argument" },
          "name": {
            "description": "The name of this api_call_argument.",
            "type": "string"
          },
          "type": {
            "description": "The type of this api_call_argument.",
            "enum":[
              "string",
              "int",
              "float",
              "boolean",
              "date",
              "time",
              "datetime"
            ],
            "type": "string"
          },
          "description": {
            "description": "The description of this api_call_argument.",
            "type": "string"
          },
          "required": {
            "description": "Defines this api_call_argument is required or not.",
            "type": "boolean"
          },
          "multiple": {
            "description": "Defines this api_call_argument is multiple or not.",
            "type": "boolean"
          },
          "default_value": {
            "description": "The default_value of this api_call_argument.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.cache.CachePolicy": {
        "description": "An entity describing a cache_policy.",
        "type": "object",
        "required": [
          "name",
          "store_type"
        ],
        "properties": {
          "_class_": { "const": "cache_policy" },
          "name": {
            "description": "The name of this cache_policy.",
            "type": "string"
          },
          "store_type": {
            "description": "The store_type of this cache_policy.",
            "enum":[
              "heap",
              "redis"
            ],
            "type": "string"
          },
          "ignore_error": {
            "description": "Defines this cache_policy is ignore_error or not.",
            "type": "boolean"
          },
          "expiration_time": {
            "description": "The expiration_time of this cache_policy.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.Duration"
          },
          "configurations": {
            "description": "The configurations of this cache_policy.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ConfigurationBinding"
            }
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.cache.HeapMemoryCachePolicy" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.cache.RedisCachePolicy" }
        ]
      },
      "laplacian.arch.backend.api.cache.HeapMemoryCachePolicy": {
        "description": "An entity describing a heap_memory_cache_policy.",
        "if": { "properties": {
          "store_type": { "const": "heap" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "heap_memory_cache_policy" },
          "name": {
            "description": "The name of this cache_policy.",
            "type": "string"
          },
          "store_type": {
            "description": "The store_type of this cache_policy.",
            "enum":[
              "heap",
              "redis"
            ],
            "type": "string"
          },
          "ignore_error": {
            "description": "Defines this cache_policy is ignore_error or not.",
            "type": "boolean"
          },
          "expiration_time": {
            "description": "The expiration_time of this cache_policy.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.Duration"
          },
          "configurations": {
            "description": "The configurations of this cache_policy.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ConfigurationBinding"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.cache.RedisCachePolicy": {
        "description": "An entity describing a redis_cache_policy.",
        "if": { "properties": {
          "store_type": { "const": "redis" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "redis_cache_policy" },
          "name": {
            "description": "The name of this cache_policy.",
            "type": "string"
          },
          "store_type": {
            "description": "The store_type of this cache_policy.",
            "enum":[
              "heap",
              "redis"
            ],
            "type": "string"
          },
          "ignore_error": {
            "description": "Defines this cache_policy is ignore_error or not.",
            "type": "boolean"
          },
          "expiration_time": {
            "description": "The expiration_time of this cache_policy.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.Duration"
          },
          "configurations": {
            "description": "The configurations of this cache_policy.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ConfigurationBinding"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.data_file.DataFileFetcher": {
        "description": "A graphql field fetcher retrieving the value from a file located in the container.",
        "if": { "properties": {
          "type": { "const": "data_file" }
        }},
        "then": {
        "required": [
          "data_file"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "data_file_fetcher" },
          "type": {
            "description": "The type of this graphql_field_fetcher.",
            "enum":[
              "data_file",
              "custom",
              "graphql_field_link",
              "mybatis",
              "rest_api"
            ],
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field_fetcher.",
            "type": "string"
          },
          "is_batch": {
            "description": "Defines this graphql_field_fetcher is is_batch or not.",
            "type": "boolean"
          },
          "result_selector": {
            "description": "The result_selector of this graphql_field_fetcher.",
            "type": "string"
          },
          "result_mapper": {
            "description": "The result_mapper of this graphql_field_fetcher.",
            "type": "string"
          },
          "cache_policy_name": {
            "description": "The cache_policy_name of this graphql_field_fetcher.",
            "type": "string"
          },
          "data_file": {
            "description": "The data_file of this data_file_fetcher.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.data_file.DataFile"
          }
        }
        }
      },
      "laplacian.arch.backend.api.data_file.DataFile": {
        "description": "An entity describing a data_file.",
        "type": "object",
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "data_file" },
          "name": {
            "allOf": [{
            "description": "The name of this data_file.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "description": {
            "description": "The description of this data_file.",
            "type": "string"
          },
          "format": {
            "description": "The format of this data_file.",
            "enum":[
              "json",
              "yaml",
              "csv"
            ],
            "type": "string"
          },
          "default_path": {
            "allOf": [{
            "description": "The default_path of this data_file.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/file_path"
            }]
          }
        }
      },
      "laplacian.arch.backend.api.datasource.Datasource": {
        "description": "A *DataSource* represents an interface through which a client application access to a data store.\nThis includes the following models.\n- The entity that the datastore exposes to the client\n- Statement issued by the client to the datastore",
        "type": "object",
        "required": [
          "db_type",
          "non_blocking"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "datasource" },
          "name": {
            "allOf": [{
            "description": "The name of this datasource.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "description": {
            "description": "The description of this datasource.",
            "type": "string"
          },
          "db_type": {
            "description": "The db_type of this datasource.",
            "enum":[
              "postgres",
              "mysql",
              "oracle"
            ],
            "type": "string"
          },
          "non_blocking": {
            "description": "Defines this datasource is non_blocking or not.",
            "type": "boolean"
          }
        }
      },
      "laplacian.arch.backend.api.datasource.DatasourceEntry": {
        "description": "An entity describing a datasource_entry.",
        "type": "object",
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "datasource_entry" },
          "name": {
            "description": "The name of this datasource_entry.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.Duration": {
        "description": "An entity describing a duration.",
        "type": "object",
        "required": [
          "amount",
          "unit"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "duration" },
          "amount": {
            "allOf": [{
            "description": "The amount of this duration.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/integer_or_placeholder"
            }]
          },
          "unit": {
            "description": "The unit of this duration.",
            "enum":[
              "day",
              "hour",
              "second",
              "millisecond"
            ],
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.AvgBucketAggregate": {
        "description": "An entity describing a avg_bucket_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "avg_bucket" }
        }},
        "then": {
        "required": [
          "buckets_path"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "avg_bucket_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "buckets_path": {
            "description": "The buckets_path of this avg_bucket_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.BucketScriptAggregate": {
        "description": "An entity describing a bucket_script_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "bucket_script" }
        }},
        "then": {
        "required": [
          "script",
          "buckets_path"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "bucket_script_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "script": {
            "description": "The script of this bucket_script_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          },
          "buckets_path": {
            "description": "The buckets_path of this bucket_script_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.BucketScriptPath"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.BucketScriptPath": {
        "description": "An entity describing a bucket_script_path.",
        "type": "object",
        "required": [
          "name",
          "path"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "bucket_script_path" },
          "name": {
            "description": "The name of this bucket_script_path.",
            "type": "string"
          },
          "path": {
            "description": "The path of this bucket_script_path.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.BucketSelectorAggregate": {
        "description": "An entity describing a bucket_selector_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "bucket_selector" }
        }},
        "then": {
        "required": [
          "script",
          "buckets_path"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "bucket_selector_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "script": {
            "description": "The script of this bucket_selector_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          },
          "buckets_path": {
            "description": "The buckets_path of this bucket_selector_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.BucketScriptPath"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.BucketSortAggregate": {
        "description": "An entity describing a bucket_sort_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "bucket_sort" }
        }},
        "then": {
        "required": [
          "sorts"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "bucket_sort_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "from": {
            "allOf": [{
            "description": "Zero-based from index.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/integer_or_placeholder"
            }]
          },
          "bucket_size": {
            "allOf": [{
            "description": "The size of the bucket_sort to be returned.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/integer_or_placeholder"
            }]
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          },
          "sorts": {
            "description": "The sorts of this bucket_sort_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.FieldSort"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.FieldSort": {
        "description": "An entity describing a field_sort.",
        "type": "object",
        "required": [
          "field"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "field_sort" },
          "field": {
            "description": "The field of this field_sort.",
            "type": "string"
          },
          "order": {
            "description": "The order of this field_sort.",
            "pattern": "^\\$\\{[^}]*\\}|asc|desc$",
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramAggregate": {
        "description": "An entity describing a date_histogram_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "date_histogram" }
        }},
        "then": {
        "required": [
          "interval"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "date_histogram_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "format": {
            "description": "The format of this date_histogram_aggregate.",
            "type": "string"
          },
          "timezone": {
            "description": "The timezone of this date_histogram_aggregate.",
            "type": "string"
          },
          "min_doc_count": {
            "allOf": [{
            "description": "the minimum document count required per bucket",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/integer_or_placeholder"
            }]
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          },
          "interval": {
            "description": "The interval of this date_histogram_aggregate.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramInterval"
          },
          "extended_bounds": {
            "description": "The extended_bounds of this date_histogram_aggregate.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramExtendedBounds"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramExtendedBounds": {
        "description": "An entity describing a date_histogram_extended_bounds.",
        "type": "object",
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "date_histogram_extended_bounds" },
          "min": {
            "description": "The min of this date_histogram_extended_bounds.",
            "type": "string"
          },
          "max": {
            "description": "The max of this date_histogram_extended_bounds.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramInterval": {
        "description": "An entity describing a date_histogram_interval.",
        "type": "object",
        "required": [
          "type",
          "unit",
          "value"
        ],
        "properties": {
          "_class_": { "const": "date_histogram_interval" },
          "type": {
            "description": "The type of this date_histogram_interval.",
            "enum":[
              "calendar",
              "fixed"
            ],
            "type": "string"
          },
          "unit": {
            "description": "The unit of this date_histogram_interval.",
            "type": "string"
          },
          "value": {
            "description": "The value of this date_histogram_interval.",
            "type": "string"
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramCalendarInterval" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramFixedInterval" }
        ]
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramCalendarInterval": {
        "description": "An entity describing a date_histogram_calendar_interval.",
        "if": { "properties": {
          "type": { "const": "calendar" }
        }},
        "then": {
        "required": [
          "unit"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "date_histogram_calendar_interval" },
          "type": {
            "description": "The type of this date_histogram_interval.",
            "enum":[
              "calendar",
              "fixed"
            ],
            "type": "string"
          },
          "unit": {
            "description": "The unit of this date_histogram_interval.",
            "type": "string"
          },
          "value": {
            "description": "The value of this date_histogram_interval.",
            "type": "string"
          },
          "unit": {
            "description": "The unit of this date_histogram_calendar_interval.",
            "pattern": "^\\$\\{[^}]*\\}|minute|hour|day|week|month|quarter|year$",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramFixedInterval": {
        "description": "An entity describing a date_histogram_fixed_interval.",
        "if": { "properties": {
          "type": { "const": "fixed" }
        }},
        "then": {
        "required": [
          "unit",
          "value"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "date_histogram_fixed_interval" },
          "type": {
            "description": "The type of this date_histogram_interval.",
            "enum":[
              "calendar",
              "fixed"
            ],
            "type": "string"
          },
          "unit": {
            "description": "The unit of this date_histogram_interval.",
            "type": "string"
          },
          "value": {
            "description": "The value of this date_histogram_interval.",
            "type": "string"
          },
          "unit": {
            "description": "The unit of this date_histogram_fixed_interval.",
            "pattern": "^\\$\\{[^}]*\\}|millisecond|second|minute|hour|day$",
            "type": "string"
          },
          "value": {
            "description": "The value of this date_histogram_fixed_interval.",
            "pattern": "^\\$\\{[^}]*\\}|[0-9]*$",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.DateRangeAggregate": {
        "description": "An entity describing a date_range_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "date_range" }
        }},
        "then": {
        "required": [
          "ranges"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "date_range_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "format": {
            "description": "The format of this date_range_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          },
          "ranges": {
            "description": "The ranges of this date_range_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.AggregateGroupRange"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.AggregateGroupRange": {
        "description": "An entity describing a aggregate_group_range.",
        "type": "object",
        "required": [
          "key"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "aggregate_group_range" },
          "key": {
            "description": "The key of this aggregate_group_range.",
            "type": "string"
          },
          "from": {
            "description": "The from of this aggregate_group_range.",
            "type": "string"
          },
          "to": {
            "description": "The to of this aggregate_group_range.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.FilterAggregate": {
        "description": "An entity describing a filter_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "filter" }
        }},
        "then": {
        "required": [
          "predicate"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "filter_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          },
          "predicate": {
            "description": "The predicate of this filter_aggregate.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.FiltersAggregate": {
        "description": "An entity describing a filters_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "filters" }
        }},
        "then": {
        "required": [
          "filters"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "filters_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          },
          "filters": {
            "description": "The filters of this filters_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.KeyedFilter"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.KeyedFilter": {
        "description": "An entity describing a keyed_filter.",
        "type": "object",
        "required": [
          "key",
          "predicate"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "keyed_filter" },
          "key": {
            "description": "The key of this keyed_filter.",
            "type": "string"
          },
          "predicate": {
            "description": "The predicate of this keyed_filter.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate"
          }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.SumAggregate": {
        "description": "An entity describing a sum_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "sum" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "sum_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.AvgAggregate": {
        "description": "An entity describing a avg_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "avg" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "avg_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.MinAggregate": {
        "description": "An entity describing a min_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "min" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "min_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.MaxAggregate": {
        "description": "An entity describing a max_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "max" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "max_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.ValueCountAggregate": {
        "description": "An entity describing a value_count_aggregate.",
        "if": { "properties": {
          "aggregation_type": { "const": "count" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "value_count_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.TermsAggregate": {
        "description": "A multi-bucket value source based aggregation where buckets are dynamically built\n- one per unique value.",
        "if": { "properties": {
          "aggregation_type": { "const": "terms" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "terms_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "max_buckets": {
            "allOf": [{
            "description": "The number of term buckets should be returned (default: 10)",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/integer_or_placeholder"
            }]
          },
          "sort_by_count": {
            "allOf": [{
            "description": "The sort order ('asc' or 'desc') in which the buckets will be returned",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/sort_order_or_placeholder"
            }]
          },
          "shard_size": {
            "allOf": [{
            "description": "The number of term buckets each shard will return to the coordinating node\n(the node that coordinates the search execution)",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/integer_or_placeholder"
            }]
          },
          "min_doc_count": {
            "allOf": [{
            "description": "the minimum document count required per term",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/integer_or_placeholder"
            }]
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate": {
        "description": "An entity describing a elasticsearch_aggregate.",
        "type": "object",
        "required": [
          "name",
          "aggregation_type"
        ],
        "properties": {
          "_class_": { "const": "elasticsearch_aggregate" },
          "name": {
            "description": "The name of this elasticsearch_aggregate.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_aggregate.",
            "type": "string"
          },
          "aggregation_type": {
            "description": "The aggregation_type of this elasticsearch_aggregate.",
            "enum":[
              "avg_bucket",
              "bucket_script",
              "bucket_selector",
              "bucket_sort",
              "date_histogram",
              "date_range",
              "filter",
              "filters",
              "sum",
              "avg",
              "min",
              "max",
              "count",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this elasticsearch_aggregate.",
            "type": "string"
          },
          "sub_aggregates": {
            "description": "The sub_aggregates of this elasticsearch_aggregate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.AvgBucketAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.BucketScriptAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.BucketSelectorAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.BucketSortAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateRangeAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.FilterAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.FiltersAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.SumAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.AvgAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.MinAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.MaxAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ValueCountAggregate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.TermsAggregate" }
        ]
      },
      "laplacian.arch.backend.api.elasticsearch.ElasticsearchIndex": {
        "description": "An entity describing a elasticsearch_index.",
        "type": "object",
        "required": [
          "name",
          "document_model_name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "elasticsearch_index" },
          "name": {
            "description": "The name of this elasticsearch_index.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_index.",
            "type": "string"
          },
          "document_model_name": {
            "description": "The document_model_name of this elasticsearch_index.",
            "type": "string"
          },
          "default_sorts": {
            "description": "The default_sorts of this elasticsearch_index.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.ElasticsearchIndexSort"
            }
          }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.ElasticsearchIndexSort": {
        "description": "An entity describing a elasticsearch_index_sort.",
        "type": "object",
        "required": [
          "field"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "elasticsearch_index_sort" },
          "field": {
            "description": "The field of this elasticsearch_index_sort.",
            "type": "string"
          },
          "order": {
            "description": "The order of this elasticsearch_index_sort.",
            "enum":[
              "asc",
              "desc"
            ],
            "type": "string"
          },
          "is_numeric": {
            "description": "Defines this elasticsearch_index_sort is is_numeric or not.",
            "type": "boolean"
          }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate": {
        "description": "An entity describing a elasticsearch_query_predicate.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "_class_": { "const": "elasticsearch_query_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.BoolQueryPredicate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ExistsQueryPredicate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.MatchAllQueryPredicate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.MatchQueryPredicate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.MultiMatchQueryPredicate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.QueryStringPredicate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.RangeQueryPredicate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.TermQueryPredicate" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.TermsQueryPredicate" }
        ]
      },
      "laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQuerySort": {
        "description": "An entity describing a elasticsearch_query_sort.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "_class_": { "const": "elasticsearch_query_sort" },
          "type": {
            "description": "The type of this elasticsearch_query_sort.",
            "enum":[
              "score",
              "field"
            ],
            "type": "string"
          },
          "order": {
            "allOf": [{
            "description": "The order of this elasticsearch_query_sort.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/sort_order_or_placeholder"
            }]
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryScoreSort" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryFieldSort" }
        ]
      },
      "laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryScoreSort": {
        "description": "An entity describing a elasticsearch_query_score_sort.",
        "if": { "properties": {
          "type": { "const": "score" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "elasticsearch_query_score_sort" },
          "type": {
            "description": "The type of this elasticsearch_query_sort.",
            "enum":[
              "score",
              "field"
            ],
            "type": "string"
          },
          "order": {
            "allOf": [{
            "description": "The order of this elasticsearch_query_sort.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/sort_order_or_placeholder"
            }]
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryFieldSort": {
        "description": "An entity describing a elasticsearch_query_field_sort.",
        "if": { "properties": {
          "type": { "const": "field" }
        }},
        "then": {
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "elasticsearch_query_field_sort" },
          "type": {
            "description": "The type of this elasticsearch_query_sort.",
            "enum":[
              "score",
              "field"
            ],
            "type": "string"
          },
          "order": {
            "allOf": [{
            "description": "The order of this elasticsearch_query_sort.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/sort_order_or_placeholder"
            }]
          },
          "name": {
            "description": "The name of this elasticsearch_query_field_sort.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.ElasticsearchQuery": {
        "description": "An entity describing a elasticsearch_query.",
        "type": "object",
        "required": [
          "name",
          "index_name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "elasticsearch_query" },
          "name": {
            "description": "The name of this elasticsearch_query.",
            "type": "string"
          },
          "index_name": {
            "description": "The index_name of this elasticsearch_query.",
            "type": "string"
          },
          "description": {
            "description": "The description of this elasticsearch_query.",
            "type": "string"
          },
          "page_size": {
            "allOf": [{
            "description": "The size of the page to be returned",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/integer_or_placeholder"
            }]
          },
          "page_number": {
            "allOf": [{
            "description": "Zero-based page index.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/integer_or_placeholder"
            }]
          },
          "predicate": {
            "description": "The predicate of this elasticsearch_query.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate"
          },
          "sort": {
            "description": "The sort of this elasticsearch_query.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQuerySort"
            }
          },
          "aggregates": {
            "description": "The aggregates of this elasticsearch_query.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate"
            }
          },
          "parameters": {
            "description": "The parameters of this elasticsearch_query.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ApiCallArgument"
            }
          }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.BoolQueryPredicate": {
        "description": "An entity describing a bool_query_predicate.",
        "if": { "properties": {
          "type": { "const": "bool" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "bool_query_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          },
          "must": {
            "description": "The must of this bool_query_predicate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate"
            }
          },
          "must_not": {
            "description": "The must_not of this bool_query_predicate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate"
            }
          },
          "should": {
            "description": "The should of this bool_query_predicate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate"
            }
          },
          "filter": {
            "description": "The filter of this bool_query_predicate.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.ExistsQueryPredicate": {
        "description": "An entity describing a exists_query_predicate.",
        "if": { "properties": {
          "type": { "const": "exists" }
        }},
        "then": {
        "required": [
          "field"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "exists_query_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this exists_query_predicate.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.MatchAllQueryPredicate": {
        "description": "An entity describing a match_all_query_predicate.",
        "if": { "properties": {
          "type": { "const": "match_all" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "match_all_query_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.MatchQueryPredicate": {
        "description": "An entity describing a match_query_predicate.",
        "if": { "properties": {
          "type": { "const": "match" }
        }},
        "then": {
        "required": [
          "field",
          "value"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "match_query_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this match_query_predicate.",
            "type": "string"
          },
          "value": {
            "description": "The value of this match_query_predicate.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.MultiMatchQueryPredicate": {
        "description": "An entity describing a multi_match_query_predicate.",
        "if": { "properties": {
          "type": { "const": "multi_match" }
        }},
        "then": {
        "required": [
          "value",
          "fields"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "multi_match_query_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          },
          "value": {
            "description": "The value of this multi_match_query_predicate.",
            "type": "string"
          },
          "fields": {
            "type": "array",
            "items": {
            "description": "The fields of this multi_match_query_predicate.",
            "type": "string"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.QueryStringPredicate": {
        "description": "An entity describing a query_string_predicate.",
        "if": { "properties": {
          "type": { "const": "query_string" }
        }},
        "then": {
        "required": [
          "query"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "query_string_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          },
          "query": {
            "description": "The query of this query_string_predicate.",
            "type": "string"
          },
          "default_field": {
            "description": "The default_field of this query_string_predicate.",
            "type": "string"
          },
          "allow_leading_wildcard": {
            "description": "Defines this query_string_predicate is allow_leading_wildcard or not.",
            "type": "boolean"
          },
          "analyze_wildcard": {
            "description": "Defines this query_string_predicate is analyze_wildcard or not.",
            "type": "boolean"
          },
          "analyzer": {
            "description": "The analyzer of this query_string_predicate.",
            "type": "string"
          },
          "auto_generate_synonyms_phrase_query": {
            "description": "Defines this query_string_predicate is auto_generate_synonyms_phrase_query or not.",
            "type": "boolean"
          },
          "boost": {
            "description": "The boost of this query_string_predicate.",
            "type": "float"
          },
          "default_operator": {
            "description": "The default_operator of this query_string_predicate.",
            "enum":[
              "OR",
              "AND"
            ],
            "type": "string"
          },
          "enable_position_increments": {
            "description": "Defines this query_string_predicate is enable_position_increments or not.",
            "type": "boolean"
          },
          "fields": {
            "type": "array",
            "items": {
            "description": "The fields of this query_string_predicate.",
            "type": "string"
            }
          },
          "fuzziness": {
            "description": "The fuzziness of this query_string_predicate.",
            "enum":[
              "AUTO",
              "ONE",
              "TWO",
              "ZERO"
            ],
            "type": "string"
          },
          "fuzzy_max_expansion": {
            "description": "The fuzzy_max_expansion of this query_string_predicate.",
            "type": "int"
          },
          "fuzzy_prefix_length": {
            "description": "The fuzzy_prefix_length of this query_string_predicate.",
            "type": "int"
          },
          "fuzzy_transpositions": {
            "description": "Defines this query_string_predicate is fuzzy_transpositions or not.",
            "type": "boolean"
          },
          "lenient": {
            "description": "Defines this query_string_predicate is lenient or not.",
            "type": "boolean"
          },
          "max_determinized_states": {
            "description": "The max_determinized_states of this query_string_predicate.",
            "type": "int"
          },
          "minimum_should_match": {
            "description": "The minimum_should_match of this query_string_predicate.",
            "type": "string"
          },
          "quote_analyzer": {
            "description": "The quote_analyzer of this query_string_predicate.",
            "type": "string"
          },
          "phrase_slop": {
            "description": "The phrase_slop of this query_string_predicate.",
            "type": "int"
          },
          "quote_field_suffix": {
            "description": "The quote_field_suffix of this query_string_predicate.",
            "type": "string"
          },
          "rewrite": {
            "description": "The rewrite of this query_string_predicate.",
            "type": "string"
          },
          "time_zone": {
            "description": "The time_zone of this query_string_predicate.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.RangeQueryPredicate": {
        "description": "An entity describing a range_query_predicate.",
        "if": { "properties": {
          "type": { "const": "range" }
        }},
        "then": {
        "required": [
          "field",
          "from",
          "to"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "range_query_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this range_query_predicate.",
            "type": "string"
          },
          "from": {
            "description": "The from of this range_query_predicate.",
            "type": "string"
          },
          "to": {
            "description": "The to of this range_query_predicate.",
            "type": "string"
          },
          "include_lower": {
            "description": "Defines this range_query_predicate is include_lower or not.",
            "type": "boolean"
          },
          "include_upper": {
            "description": "Defines this range_query_predicate is include_upper or not.",
            "type": "boolean"
          },
          "timezone": {
            "description": "The timezone of this range_query_predicate.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.TermQueryPredicate": {
        "description": "An entity describing a term_query_predicate.",
        "if": { "properties": {
          "type": { "const": "term" }
        }},
        "then": {
        "required": [
          "field",
          "value",
          "boost"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "term_query_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this term_query_predicate.",
            "type": "string"
          },
          "value": {
            "description": "The value of this term_query_predicate.",
            "type": "string"
          },
          "boost": {
            "description": "The boost of this term_query_predicate.",
            "type": "number"
          }
        }
        }
      },
      "laplacian.arch.backend.api.elasticsearch.query.TermsQueryPredicate": {
        "description": "An entity describing a terms_query_predicate.",
        "if": { "properties": {
          "type": { "const": "terms" }
        }},
        "then": {
        "required": [
          "field",
          "value",
          "boost"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "terms_query_predicate" },
          "type": {
            "description": "The type of this elasticsearch_query_predicate.",
            "enum":[
              "bool",
              "exists",
              "match_all",
              "match",
              "multi_match",
              "query_string",
              "range",
              "term",
              "terms"
            ],
            "type": "string"
          },
          "field": {
            "description": "The field of this terms_query_predicate.",
            "type": "string"
          },
          "value": {
            "description": "The value of this terms_query_predicate.",
            "type": "string"
          },
          "boost": {
            "description": "The boost of this terms_query_predicate.",
            "type": "number"
          }
        }
        }
      },
      "laplacian.arch.backend.api.graphql.CustomFetcher": {
        "description": "An entity describing a custom_fetcher.",
        "if": { "properties": {
          "type": { "const": "custom" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "custom_fetcher" },
          "type": {
            "description": "The type of this graphql_field_fetcher.",
            "enum":[
              "data_file",
              "custom",
              "graphql_field_link",
              "mybatis",
              "rest_api"
            ],
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field_fetcher.",
            "type": "string"
          },
          "is_batch": {
            "description": "Defines this graphql_field_fetcher is is_batch or not.",
            "type": "boolean"
          },
          "result_selector": {
            "description": "The result_selector of this graphql_field_fetcher.",
            "type": "string"
          },
          "result_mapper": {
            "description": "The result_mapper of this graphql_field_fetcher.",
            "type": "string"
          },
          "cache_policy_name": {
            "description": "The cache_policy_name of this graphql_field_fetcher.",
            "type": "string"
          },
          "async": {
            "description": "Defines this custom_fetcher is async or not.",
            "type": "boolean"
          }
        }
        }
      },
      "laplacian.arch.backend.api.graphql.GraphqlFieldFetcher": {
        "description": "An entity describing a graphql_field_fetcher.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "_class_": { "const": "graphql_field_fetcher" },
          "type": {
            "description": "The type of this graphql_field_fetcher.",
            "enum":[
              "data_file",
              "custom",
              "graphql_field_link",
              "mybatis",
              "rest_api"
            ],
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field_fetcher.",
            "type": "string"
          },
          "is_batch": {
            "description": "Defines this graphql_field_fetcher is is_batch or not.",
            "type": "boolean"
          },
          "result_selector": {
            "description": "The result_selector of this graphql_field_fetcher.",
            "type": "string"
          },
          "result_mapper": {
            "description": "The result_mapper of this graphql_field_fetcher.",
            "type": "string"
          },
          "cache_policy_name": {
            "description": "The cache_policy_name of this graphql_field_fetcher.",
            "type": "string"
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.data_file.DataFileFetcher" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.CustomFetcher" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlFieldLink" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.mybatis.MybatisFetcher" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestApiFetcher" }
        ]
      },
      "laplacian.arch.backend.api.graphql.GraphqlFieldLink": {
        "description": "An entity describing a graphql_field_link.",
        "if": { "properties": {
          "type": { "const": "graphql_field_link" }
        }},
        "then": {
        "required": [
          "type_name",
          "field_name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "graphql_field_link" },
          "type": {
            "description": "The type of this graphql_field_fetcher.",
            "enum":[
              "data_file",
              "custom",
              "graphql_field_link",
              "mybatis",
              "rest_api"
            ],
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field_fetcher.",
            "type": "string"
          },
          "is_batch": {
            "description": "Defines this graphql_field_fetcher is is_batch or not.",
            "type": "boolean"
          },
          "result_selector": {
            "description": "The result_selector of this graphql_field_fetcher.",
            "type": "string"
          },
          "result_mapper": {
            "description": "The result_mapper of this graphql_field_fetcher.",
            "type": "string"
          },
          "cache_policy_name": {
            "description": "The cache_policy_name of this graphql_field_fetcher.",
            "type": "string"
          },
          "type_name": {
            "allOf": [{
            "description": "The type_name of this graphql_field_link.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "group": {
            "description": "The group of this graphql_field_link.",
            "type": "string"
          },
          "field_name": {
            "allOf": [{
            "description": "The field_name of this graphql_field_link.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          }
        }
        }
      },
      "laplacian.arch.backend.api.graphql.GraphqlCompositeField": {
        "description": "An entity describing a graphql_composite_field.",
        "if": { "properties": {
          "field_type": { "const": "composite" }
        }},
        "then": {
        "required": [
          "data_model_name",
          "data_model_namespace"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "graphql_composite_field" },
          "name": {
            "description": "The name of this graphql_field.",
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field.",
            "type": "string"
          },
          "field_type": {
            "description": "The field_type of this graphql_field.",
            "enum":[
              "composite",
              "scalar",
              "graphql_type"
            ],
            "type": "string"
          },
          "multiple": {
            "description": "Defines this graphql_field is multiple or not.",
            "type": "boolean"
          },
          "optional": {
            "description": "Defines this graphql_field is optional or not.",
            "type": "boolean"
          },
          "operation_type": {
            "description": "The operation_type of this graphql_field.",
            "enum":[
              "query",
              "mutation",
              "subscription"
            ],
            "type": "string"
          },
          "context_data_model_name": {
            "description": "The context_data_model_name of this graphql_field.",
            "type": "string"
          },
          "root_field": {
            "description": "Specifies whether this field is shown in the root query object.",
            "type": "boolean"
          },
          "data_model_name": {
            "description": "The data_model_name of this graphql_composite_field.",
            "type": "string"
          },
          "data_model_namespace": {
            "description": "The data_model_namespace of this graphql_composite_field.",
            "type": "string"
          },
          "fetcher": {
            "description": "The fetcher of this graphql_field.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlFieldFetcher"
          },
          "arguments": {
            "description": "The arguments of this graphql_field.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ApiCallArgument"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.graphql.GraphqlField": {
        "description": "An entity describing a graphql_field.",
        "type": "object",
        "required": [
          "name",
          "field_type"
        ],
        "properties": {
          "_class_": { "const": "graphql_field" },
          "name": {
            "description": "The name of this graphql_field.",
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field.",
            "type": "string"
          },
          "field_type": {
            "description": "The field_type of this graphql_field.",
            "enum":[
              "composite",
              "scalar",
              "graphql_type"
            ],
            "type": "string"
          },
          "multiple": {
            "description": "Defines this graphql_field is multiple or not.",
            "type": "boolean"
          },
          "optional": {
            "description": "Defines this graphql_field is optional or not.",
            "type": "boolean"
          },
          "operation_type": {
            "description": "The operation_type of this graphql_field.",
            "enum":[
              "query",
              "mutation",
              "subscription"
            ],
            "type": "string"
          },
          "context_data_model_name": {
            "description": "The context_data_model_name of this graphql_field.",
            "type": "string"
          },
          "root_field": {
            "description": "Specifies whether this field is shown in the root query object.",
            "type": "boolean"
          },
          "fetcher": {
            "description": "The fetcher of this graphql_field.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlFieldFetcher"
          },
          "arguments": {
            "description": "The arguments of this graphql_field.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ApiCallArgument"
            }
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlCompositeField" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlScalarField" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlTypeReference" }
        ]
      },
      "laplacian.arch.backend.api.graphql.GraphqlScalarField": {
        "description": "An entity describing a graphql_scalar_field.",
        "if": { "properties": {
          "field_type": { "const": "scalar" }
        }},
        "then": {
        "required": [
          "value_type"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "graphql_scalar_field" },
          "name": {
            "description": "The name of this graphql_field.",
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field.",
            "type": "string"
          },
          "field_type": {
            "description": "The field_type of this graphql_field.",
            "enum":[
              "composite",
              "scalar",
              "graphql_type"
            ],
            "type": "string"
          },
          "multiple": {
            "description": "Defines this graphql_field is multiple or not.",
            "type": "boolean"
          },
          "optional": {
            "description": "Defines this graphql_field is optional or not.",
            "type": "boolean"
          },
          "operation_type": {
            "description": "The operation_type of this graphql_field.",
            "enum":[
              "query",
              "mutation",
              "subscription"
            ],
            "type": "string"
          },
          "context_data_model_name": {
            "description": "The context_data_model_name of this graphql_field.",
            "type": "string"
          },
          "root_field": {
            "description": "Specifies whether this field is shown in the root query object.",
            "type": "boolean"
          },
          "value_type": {
            "description": "The value_type of this graphql_scalar_field.",
            "enum":[
              "string",
              "int",
              "float"
            ],
            "type": "string"
          },
          "fetcher": {
            "description": "The fetcher of this graphql_field.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlFieldFetcher"
          },
          "arguments": {
            "description": "The arguments of this graphql_field.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ApiCallArgument"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.graphql.GraphqlTypeReference": {
        "description": "An entity describing a graphql_type_reference.",
        "if": { "properties": {
          "field_type": { "const": "graphql_type" }
        }},
        "then": {
        "required": [
          "graphql_type_name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "graphql_type_reference" },
          "name": {
            "description": "The name of this graphql_field.",
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field.",
            "type": "string"
          },
          "field_type": {
            "description": "The field_type of this graphql_field.",
            "enum":[
              "composite",
              "scalar",
              "graphql_type"
            ],
            "type": "string"
          },
          "multiple": {
            "description": "Defines this graphql_field is multiple or not.",
            "type": "boolean"
          },
          "optional": {
            "description": "Defines this graphql_field is optional or not.",
            "type": "boolean"
          },
          "operation_type": {
            "description": "The operation_type of this graphql_field.",
            "enum":[
              "query",
              "mutation",
              "subscription"
            ],
            "type": "string"
          },
          "context_data_model_name": {
            "description": "The context_data_model_name of this graphql_field.",
            "type": "string"
          },
          "root_field": {
            "description": "Specifies whether this field is shown in the root query object.",
            "type": "boolean"
          },
          "graphql_type_name": {
            "description": "The graphql_type_name of this graphql_type_reference.",
            "type": "string"
          },
          "graphql_type_group": {
            "description": "The graphql_type_group of this graphql_type_reference.",
            "type": "string"
          },
          "fetcher": {
            "description": "The fetcher of this graphql_field.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlFieldFetcher"
          },
          "arguments": {
            "description": "The arguments of this graphql_field.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ApiCallArgument"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.graphql.GraphqlType": {
        "description": "An entity describing a graphql_type.",
        "type": "object",
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "graphql_type" },
          "name": {
            "description": "The name of this graphql_type.",
            "type": "string"
          },
          "group": {
            "description": "The group of this graphql_type.",
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_type.",
            "type": "string"
          },
          "data_model_name": {
            "description": "The data_model_name of this graphql_type.",
            "type": "string"
          },
          "data_model_namespace": {
            "description": "The data_model_namespace of this graphql_type.",
            "type": "string"
          },
          "fields": {
            "description": "The fields of this graphql_type.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlField"
            }
          },
          "configurations": {
            "description": "The configurations of this graphql_type.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ConfigurationBinding"
            }
          }
        }
      },
      "laplacian.arch.backend.api.mybatis.MybatisFetcher": {
        "description": "An entity describing a mybatis_fetcher.",
        "if": { "properties": {
          "type": { "const": "mybatis" }
        }},
        "then": {
        "required": [
          "datasource_name",
          "statement_type",
          "statement"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "mybatis_fetcher" },
          "type": {
            "description": "The type of this graphql_field_fetcher.",
            "enum":[
              "data_file",
              "custom",
              "graphql_field_link",
              "mybatis",
              "rest_api"
            ],
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field_fetcher.",
            "type": "string"
          },
          "is_batch": {
            "description": "Defines this graphql_field_fetcher is is_batch or not.",
            "type": "boolean"
          },
          "result_selector": {
            "description": "The result_selector of this graphql_field_fetcher.",
            "type": "string"
          },
          "result_mapper": {
            "description": "The result_mapper of this graphql_field_fetcher.",
            "type": "string"
          },
          "cache_policy_name": {
            "description": "The cache_policy_name of this graphql_field_fetcher.",
            "type": "string"
          },
          "datasource_name": {
            "allOf": [{
            "description": "The datasource_name of this mybatis_fetcher.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "statement_type": {
            "description": "The statement_type of this mybatis_fetcher.",
            "enum":[
              "select",
              "insert",
              "update",
              "delete",
              "fragment"
            ],
            "type": "string"
          },
          "statement": {
            "description": "The statement of this mybatis_fetcher.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.rest.RestApiFetcher": {
        "description": "An entity describing a rest_api_fetcher.",
        "if": { "properties": {
          "type": { "const": "rest_api" }
        }},
        "then": {
        "required": [
          "rest_resource_name",
          "rest_operation_name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "rest_api_fetcher" },
          "type": {
            "description": "The type of this graphql_field_fetcher.",
            "enum":[
              "data_file",
              "custom",
              "graphql_field_link",
              "mybatis",
              "rest_api"
            ],
            "type": "string"
          },
          "description": {
            "description": "The description of this graphql_field_fetcher.",
            "type": "string"
          },
          "is_batch": {
            "description": "Defines this graphql_field_fetcher is is_batch or not.",
            "type": "boolean"
          },
          "result_selector": {
            "description": "The result_selector of this graphql_field_fetcher.",
            "type": "string"
          },
          "result_mapper": {
            "description": "The result_mapper of this graphql_field_fetcher.",
            "type": "string"
          },
          "cache_policy_name": {
            "description": "The cache_policy_name of this graphql_field_fetcher.",
            "type": "string"
          },
          "rest_resource_name": {
            "description": "The rest_resource_name of this rest_api_fetcher.",
            "type": "string"
          },
          "rest_operation_name": {
            "description": "The rest_operation_name of this rest_api_fetcher.",
            "type": "string"
          },
          "argument_assignments": {
            "description": "The argument_assignments of this rest_api_fetcher.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.ArgumentAssignment"
            }
          }
        }
        }
      },
      "laplacian.arch.backend.api.rest.ArgumentAssignment": {
        "description": "An entity describing a argument_assignment.",
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "argument_assignment" },
          "key": {
            "allOf": [{
            "description": "The key of this argument_assignment.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "value": {
            "description": "The value of this argument_assignment.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.ArgumentAssignmentValue"
          }
        }
      },
      "laplacian.arch.backend.api.rest.ArgumentAssignmentValue": {
        "description": "An entity describing a argument_assignment_value.",
        "type": "object",
        "required": [
          "from"
        ],
        "properties": {
          "_class_": { "const": "argument_assignment_value" },
          "from": {
            "description": "The from of this argument_assignment_value.",
            "enum":[
              "fetcher_argument",
              "graphql_type_config",
              "expression"
            ],
            "type": "string"
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.ArgumentAssignmentValueFetcherArgument" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.ArgumentAssignmentValueGraphqlTypeConfig" },
          { "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.ArgumentAssignmentValueExpression" }
        ]
      },
      "laplacian.arch.backend.api.rest.ArgumentAssignmentValueFetcherArgument": {
        "description": "An entity describing a argument_assignment_value_fetcher_argument.",
        "if": { "properties": {
          "from": { "const": "fetcher_argument" }
        }},
        "then": {
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "argument_assignment_value_fetcher_argument" },
          "from": {
            "description": "The from of this argument_assignment_value.",
            "enum":[
              "fetcher_argument",
              "graphql_type_config",
              "expression"
            ],
            "type": "string"
          },
          "name": {
            "allOf": [{
            "description": "The name of this argument_assignment_value_fetcher_argument.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          }
        }
        }
      },
      "laplacian.arch.backend.api.rest.ArgumentAssignmentValueGraphqlTypeConfig": {
        "description": "An entity describing a argument_assignment_value_graphql_type_config.",
        "if": { "properties": {
          "from": { "const": "graphql_type_config" }
        }},
        "then": {
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "argument_assignment_value_graphql_type_config" },
          "from": {
            "description": "The from of this argument_assignment_value.",
            "enum":[
              "fetcher_argument",
              "graphql_type_config",
              "expression"
            ],
            "type": "string"
          },
          "name": {
            "allOf": [{
            "description": "The name of this argument_assignment_value_graphql_type_config.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/service_configuration_name"
            }]
          }
        }
        }
      },
      "laplacian.arch.backend.api.rest.ArgumentAssignmentValueExpression": {
        "description": "An entity describing a argument_assignment_value_expression.",
        "if": { "properties": {
          "from": { "const": "expression" }
        }},
        "then": {
        "required": [
          "expression"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "argument_assignment_value_expression" },
          "from": {
            "description": "The from of this argument_assignment_value.",
            "enum":[
              "fetcher_argument",
              "graphql_type_config",
              "expression"
            ],
            "type": "string"
          },
          "expression": {
            "description": "The expression of this argument_assignment_value_expression.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.backend.api.rest.RestOperation": {
        "description": "An entity describing a rest_operation.",
        "type": "object",
        "required": [
          "method",
          "path",
          "name",
          "response"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "rest_operation" },
          "method": {
            "allOf": [{
            "description": "The method of this rest_operation.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/http_method_for_rest"
            }]
          },
          "path": {
            "description": "The path of this rest_operation.",
            "type": "string"
          },
          "name": {
            "description": "The name of this rest_operation.",
            "type": "string"
          },
          "description": {
            "description": "The description of this rest_operation.",
            "type": "string"
          },
          "arguments": {
            "description": "The arguments of this rest_operation.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ApiCallArgument"
            }
          },
          "path_parameters": {
            "description": "The path_parameters of this rest_operation.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestRequestParameter"
            }
          },
          "query_parameters": {
            "description": "The query_parameters of this rest_operation.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestRequestParameter"
            }
          },
          "http_headers": {
            "description": "The http_headers of this rest_operation.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestRequestParameter"
            }
          },
          "response": {
            "description": "The response of this rest_operation.",
            "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestOperationResponse"
          }
        }
      },
      "laplacian.arch.backend.api.rest.RestOperationResponse": {
        "description": "An entity describing a rest_operation_response.",
        "type": "object",
        "required": [
          "type"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "rest_operation_response" },
          "type": {
            "description": "The type of this rest_operation_response.",
            "enum":[
              "string",
              "number",
              "boolean",
              "array",
              "object"
            ],
            "type": "string"
          },
          "optional": {
            "description": "Defines this rest_operation_response is optional or not.",
            "type": "boolean"
          },
          "multiple": {
            "description": "Defines this rest_operation_response is multiple or not.",
            "type": "boolean"
          }
        }
      },
      "laplacian.arch.backend.api.rest.RestRequestParameter": {
        "description": "An entity describing a rest_request_parameter.",
        "type": "object",
        "required": [
          "name",
          "type",
          "value"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "rest_request_parameter" },
          "name": {
            "description": "The name of this rest_request_parameter.",
            "type": "string"
          },
          "type": {
            "description": "The type of this rest_request_parameter.",
            "enum":[
              "string",
              "number",
              "boolean",
              "object"
            ],
            "type": "string"
          },
          "multiple": {
            "description": "Defines this rest_request_parameter is multiple or not.",
            "type": "boolean"
          },
          "value": {
            "description": "The value of this rest_request_parameter.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.rest.RestResource": {
        "description": "An entity describing a rest_resource.",
        "type": "object",
        "required": [
          "name",
          "base_url",
          "operations"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "rest_resource" },
          "name": {
            "description": "The name of this rest_resource.",
            "type": "string"
          },
          "description": {
            "description": "The description of this rest_resource.",
            "type": "string"
          },
          "resource_model_name": {
            "description": "The resource_model_name of this rest_resource.",
            "type": "string"
          },
          "base_url": {
            "description": "The base_url of this rest_resource.",
            "type": "string"
          },
          "enable_automatic_cookie_handling": {
            "description": "Defines this rest_resource is enable_automatic_cookie_handling or not.",
            "type": "boolean"
          },
          "operations": {
            "description": "The operations of this rest_resource.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestOperation"
            }
          },
          "configurations": {
            "description": "The configurations of this rest_resource.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.ConfigurationBinding"
            }
          }
        }
      },
      "laplacian.arch.backend.api.Service": {
        "description": "An entity describing a service.",
        "type": "object",
        "required": [
          "name",
          "version"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "service" },
          "name": {
            "description": "The name of this service.",
            "type": "string"
          },
          "version": {
            "description": "The version of this service.",
            "type": "string"
          },
          "namespace": {
            "allOf": [{
            "description": "The namespace of this service.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/namespace"
            }]
          },
          "description": {
            "description": "The description of this service.",
            "type": "string"
          },
          "instrumentations": {
            "type": "array",
            "items": {
            "description": "The instrumentations of this service.",
            "type": "string"
            }
          },
          "datasource_entries": {
            "description": "The datasource_entries of this service.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.datasource.DatasourceEntry"
            }
          },
          "graphql_type_entries": {
            "description": "The graphql_type_entries of this service.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.backend.api.GraphqlTypeEntry"
            }
          }
        }
      },
      "laplacian.arch.backend.api.ElasticSearchClient": {
        "description": "An entity describing a elastic_search_client.",
        "type": "object",
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "elastic_search_client" },
          "name": {
            "description": "The name of this elastic_search_client.",
            "type": "string"
          },
          "is_default": {
            "description": "Defines this elastic_search_client is is_default or not.",
            "type": "boolean"
          },
          "configuration_category": {
            "allOf": [{
            "description": "The configuration_category of this elastic_search_client.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/service_configuration_category"
            }]
          },
          "configuration_name_of_endpoints": {
            "allOf": [{
            "description": "The configuration_name_of_endpoints of this elastic_search_client.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/service_configuration_name"
            }]
          },
          "configuration_name_of_path_prefix": {
            "allOf": [{
            "description": "The configuration_name_of_path_prefix of this elastic_search_client.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/service_configuration_name"
            }]
          },
          "configuration_name_of_connect_timeout": {
            "allOf": [{
            "description": "The configuration_name_of_connect_timeout of this elastic_search_client.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/service_configuration_name"
            }]
          },
          "configuration_name_of_socket_timeout": {
            "allOf": [{
            "description": "The configuration_name_of_socket_timeout of this elastic_search_client.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/service_configuration_name"
            }]
          },
          "configuration_name_of_max_in_memory_size": {
            "allOf": [{
            "description": "The configuration_name_of_max_in_memory_size of this elastic_search_client.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/service_configuration_name"
            }]
          }
        }
      },
      "laplacian.arch.backend.api.GraphqlTypeEntry": {
        "description": "An entity describing a graphql_type_entry.",
        "type": "object",
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "graphql_type_entry" },
          "name": {
            "description": "The name of this graphql_type_entry.",
            "type": "string"
          },
          "group": {
            "description": "The group of this graphql_type_entry.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.ServiceConfiguration": {
        "description": "An entity describing a service_configuration.",
        "type": "object",
        "required": [
          "name",
          "category",
          "type"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "service_configuration" },
          "name": {
            "allOf": [{
            "description": "The name of this service_configuration.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/service_configuration_name"
            }]
          },
          "category": {
            "allOf": [{
            "description": "The category of this service_configuration.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/service_configuration_category"
            }]
          },
          "type": {
            "description": "The type of this service_configuration.",
            "enum":[
              "string",
              "int",
              "float",
              "boolean"
            ],
            "type": "string"
          },
          "default_value": {
            "description": "The default_value of this service_configuration.",
            "type": "string"
          },
          "environment_variable_name": {
            "description": "The environment_variable_name of this service_configuration.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.backend.api.ConfigurationBinding": {
        "description": "An entity describing a configuration_binding.",
        "type": "object",
        "required": [
          "name",
          "category"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "configuration_binding" },
          "name": {
            "description": "The name of this configuration_binding.",
            "pattern": "^[a-z][-a-z0-9]*$",
            "type": "string"
          },
          "category": {
            "description": "The category of this configuration_binding.",
            "pattern": "^[a-z][-a-z0-9]*(\\.[a-z][-a-z0-9]*)*$",
            "type": "string"
          },
          "variable_name": {
            "description": "The variable_name of this configuration_binding.",
            "pattern": "^[a-z][a-zA-Z0-9]*$",
            "type": "string"
          }
        }
      },
      "laplacian.arch.deployment.component.Component": {
        "description": "An entity describing a component.",
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "_class_": { "const": "component" },
          "name": {
            "description": "The name of this component.",
            "type": "string"
          },
          "type": {
            "description": "The type of this component.",
            "enum":[
              "container_image",
              "elasticsearch_container_image",
              "mysql_container_image",
              "postgres_container_image",
              "springboot2_api_service_container_image"
            ],
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
            "description": "The tags of this component.",
            "type": "string"
            }
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.container.ContainerImage" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.elasticsearch.ElasticsearchContainerImage" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.mysql.MysqlContainerImage" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.postgres.PostgresContainerImage" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.springboot2_api_service.Springboot2ApiServiceContainerImage" }
        ]
      },
      "laplacian.arch.deployment.component.container.ContainerImage": {
        "description": "An entity describing a container_image.",
        "if": { "properties": {
          "type": { "const": "container_image" }
        }},
        "then": {
        "required": [
        ],
        "properties": {
          "_class_": { "const": "container_image" },
          "name": {
            "description": "The name of this component.",
            "type": "string"
          },
          "type": {
            "description": "The type of this component.",
            "enum":[
              "container_image",
              "elasticsearch_container_image",
              "mysql_container_image",
              "postgres_container_image",
              "springboot2_api_service_container_image"
            ],
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
            "description": "The tags of this component.",
            "type": "string"
            }
          },
          "base_name": {
            "description": "The base_name of this container_image.",
            "type": "string"
          },
          "custom_built": {
            "description": "Defines this container_image is custom_built or not.",
            "type": "boolean"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_image.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.component.container.EnvironmentVariableDefinition"
            }
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.elasticsearch.ElasticsearchContainerImage" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.mysql.MysqlContainerImage" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.postgres.PostgresContainerImage" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.springboot2_api_service.Springboot2ApiServiceContainerImage" }
        ]
        }
      },
      "laplacian.arch.deployment.component.container.EnvironmentVariableDefinition": {
        "description": "An entity describing a environment_variable_definition.",
        "type": "object",
        "required": [
          "name",
          "default_value"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "environment_variable_definition" },
          "name": {
            "allOf": [{
            "description": "The name of this environment_variable_definition.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "description": {
            "description": "The description of this environment_variable_definition.",
            "type": "string"
          },
          "optional": {
            "description": "Defines this environment_variable_definition is optional or not.",
            "type": "boolean"
          },
          "default_value": {
            "description": "The default_value of this environment_variable_definition.",
            "type": "string"
          },
          "multiple": {
            "description": "Defines this environment_variable_definition is multiple or not.",
            "type": "boolean"
          }
        }
      },
      "laplacian.arch.deployment.component.elasticsearch.ElasticsearchContainerDeployment": {
        "description": "An entity describing a elasticsearch_container_deployment.",
        "if": { "properties": {
          "type": { "const": "elasticsearch_container_deployment" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "elasticsearch_container_deployment" },
          "name": {
            "description": "The name of this deployment.",
            "type": "string"
          },
          "type": {
            "description": "The type of this deployment.",
            "enum":[
              "container_deployment",
              "container_on_gce_instance",
              "container_on_gcp_cloudrun",
              "elasticsearch_container_deployment",
              "springboot2_api_service_container_deployment",
              "db_container_deployment",
              "mysql_container_deployment",
              "postgres_container_deployment"
            ],
            "type": "string"
          },
          "instance_name": {
            "description": "The instance_name of this container_deployment.",
            "type": "string"
          },
          "tag": {
            "description": "The tag of this container_deployment.",
            "type": "string"
          },
          "container_registry": {
            "description": "The container_registry of this container_deployment.",
            "type": "string"
          },
          "use_locally_built_image": {
            "description": "Defines this container_deployment is use_locally_built_image or not.",
            "type": "boolean"
          },
          "port": {
            "description": "The port of this elasticsearch_container_deployment.",
            "type": "number"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.EnvironmentVariableAssignment"
            }
          },
          "data_files": {
            "description": "The data_files of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DataFile"
            }
          }
        }
        }
      },
      "laplacian.arch.deployment.component.elasticsearch.ElasticsearchContainerImage": {
        "description": "An entity describing a elasticsearch_container_image.",
        "if": { "properties": {
          "type": { "const": "elasticsearch_container_image" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "elasticsearch_container_image" },
          "name": {
            "description": "The name of this component.",
            "type": "string"
          },
          "type": {
            "description": "The type of this component.",
            "enum":[
              "container_image",
              "elasticsearch_container_image",
              "mysql_container_image",
              "postgres_container_image",
              "springboot2_api_service_container_image"
            ],
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
            "description": "The tags of this component.",
            "type": "string"
            }
          },
          "base_name": {
            "description": "The base_name of this container_image.",
            "type": "string"
          },
          "custom_built": {
            "description": "Defines this container_image is custom_built or not.",
            "type": "boolean"
          },
          "container_image": {
            "description": "The container_image of this elasticsearch_container_image.",
            "type": "string"
          },
          "plugins": {
            "type": "array",
            "items": {
            "description": "The plugins of this elasticsearch_container_image.",
            "type": "string"
            }
          },
          "configuration_file_dir_path": {
            "description": "The configuration_file_dir_path of this elasticsearch_container_image.",
            "type": "string"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_image.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.component.container.EnvironmentVariableDefinition"
            }
          },
          "configuration_files": {
            "description": "The configuration_files of this elasticsearch_container_image.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.component.elasticsearch.ConfigurationFile"
            }
          }
        }
        }
      },
      "laplacian.arch.deployment.component.elasticsearch.ConfigurationFile": {
        "description": "An entity describing a configuration_file.",
        "type": "object",
        "required": [
          "path"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "configuration_file" },
          "path": {
            "description": "The path of this configuration_file.",
            "type": "string"
          },
          "content": {
            "description": "The content of this configuration_file.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.deployment.component.MavenArtifact": {
        "description": "An entity describing a maven_artifact.",
        "type": "object",
        "required": [
          "group",
          "name",
          "version"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "maven_artifact" },
          "group": {
            "description": "The group of this maven_artifact.",
            "type": "string"
          },
          "name": {
            "description": "The name of this maven_artifact.",
            "type": "string"
          },
          "version": {
            "description": "The version of this maven_artifact.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.deployment.component.mysql.MysqlContainerDeployment": {
        "description": "An entity describing a mysql_container_deployment.",
        "if": { "properties": {
          "type": { "const": "mysql_container_deployment" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "mysql_container_deployment" },
          "name": {
            "description": "The name of this deployment.",
            "type": "string"
          },
          "type": {
            "description": "The type of this deployment.",
            "enum":[
              "container_deployment",
              "container_on_gce_instance",
              "container_on_gcp_cloudrun",
              "elasticsearch_container_deployment",
              "springboot2_api_service_container_deployment",
              "db_container_deployment",
              "mysql_container_deployment",
              "postgres_container_deployment"
            ],
            "type": "string"
          },
          "instance_name": {
            "description": "The instance_name of this container_deployment.",
            "type": "string"
          },
          "tag": {
            "description": "The tag of this container_deployment.",
            "type": "string"
          },
          "container_registry": {
            "description": "The container_registry of this container_deployment.",
            "type": "string"
          },
          "use_locally_built_image": {
            "description": "Defines this container_deployment is use_locally_built_image or not.",
            "type": "boolean"
          },
          "username": {
            "description": "The username of this db_container_deployment.",
            "type": "string"
          },
          "password": {
            "description": "The password of this db_container_deployment.",
            "type": "string"
          },
          "database_name": {
            "description": "The database_name of this db_container_deployment.",
            "type": "string"
          },
          "port": {
            "description": "The port of this db_container_deployment.",
            "type": "number"
          },
          "gradle_version": {
            "description": "The gradle_version of this db_container_deployment.",
            "type": "string"
          },
          "flyway_container_base_image": {
            "description": "The flyway_container_base_image of this db_container_deployment.",
            "type": "string"
          },
          "flyway_version": {
            "description": "The flyway_version of this db_container_deployment.",
            "type": "string"
          },
          "jdbc_driver_jar": {
            "description": "The jdbc_driver_jar of this db_container_deployment.",
            "type": "string"
          },
          "jdbc_driver_class_name": {
            "description": "The jdbc_driver_class_name of this db_container_deployment.",
            "type": "string"
          },
          "jdbc_connection_string": {
            "description": "The jdbc_connection_string of this db_container_deployment.",
            "type": "string"
          },
          "port": {
            "description": "The port of this mysql_container_deployment.",
            "type": "number"
          },
          "jdbc_driver_jar": {
            "description": "The jdbc_driver_jar of this mysql_container_deployment.",
            "type": "string"
          },
          "jdbc_driver_class_name": {
            "description": "The jdbc_driver_class_name of this mysql_container_deployment.",
            "type": "string"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.EnvironmentVariableAssignment"
            }
          },
          "data_files": {
            "description": "The data_files of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DataFile"
            }
          },
          "initial_data": {
            "description": "The initial_data of this db_container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.InitialTableData"
            }
          }
        }
        }
      },
      "laplacian.arch.deployment.component.mysql.MysqlContainerImage": {
        "description": "An entity describing a mysql_container_image.",
        "if": { "properties": {
          "type": { "const": "mysql_container_image" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "mysql_container_image" },
          "name": {
            "description": "The name of this component.",
            "type": "string"
          },
          "type": {
            "description": "The type of this component.",
            "enum":[
              "container_image",
              "elasticsearch_container_image",
              "mysql_container_image",
              "postgres_container_image",
              "springboot2_api_service_container_image"
            ],
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
            "description": "The tags of this component.",
            "type": "string"
            }
          },
          "base_name": {
            "description": "The base_name of this container_image.",
            "type": "string"
          },
          "custom_built": {
            "description": "Defines this container_image is custom_built or not.",
            "type": "boolean"
          },
          "base_name": {
            "description": "The base_name of this mysql_container_image.",
            "type": "string"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_image.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.component.container.EnvironmentVariableDefinition"
            }
          }
        }
        }
      },
      "laplacian.arch.deployment.component.postgres.PostgresContainerDeployment": {
        "description": "An entity describing a postgres_container_deployment.",
        "if": { "properties": {
          "type": { "const": "postgres_container_deployment" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "postgres_container_deployment" },
          "name": {
            "description": "The name of this deployment.",
            "type": "string"
          },
          "type": {
            "description": "The type of this deployment.",
            "enum":[
              "container_deployment",
              "container_on_gce_instance",
              "container_on_gcp_cloudrun",
              "elasticsearch_container_deployment",
              "springboot2_api_service_container_deployment",
              "db_container_deployment",
              "mysql_container_deployment",
              "postgres_container_deployment"
            ],
            "type": "string"
          },
          "instance_name": {
            "description": "The instance_name of this container_deployment.",
            "type": "string"
          },
          "tag": {
            "description": "The tag of this container_deployment.",
            "type": "string"
          },
          "container_registry": {
            "description": "The container_registry of this container_deployment.",
            "type": "string"
          },
          "use_locally_built_image": {
            "description": "Defines this container_deployment is use_locally_built_image or not.",
            "type": "boolean"
          },
          "username": {
            "description": "The username of this db_container_deployment.",
            "type": "string"
          },
          "password": {
            "description": "The password of this db_container_deployment.",
            "type": "string"
          },
          "database_name": {
            "description": "The database_name of this db_container_deployment.",
            "type": "string"
          },
          "port": {
            "description": "The port of this db_container_deployment.",
            "type": "number"
          },
          "gradle_version": {
            "description": "The gradle_version of this db_container_deployment.",
            "type": "string"
          },
          "flyway_container_base_image": {
            "description": "The flyway_container_base_image of this db_container_deployment.",
            "type": "string"
          },
          "flyway_version": {
            "description": "The flyway_version of this db_container_deployment.",
            "type": "string"
          },
          "jdbc_driver_jar": {
            "description": "The jdbc_driver_jar of this db_container_deployment.",
            "type": "string"
          },
          "jdbc_driver_class_name": {
            "description": "The jdbc_driver_class_name of this db_container_deployment.",
            "type": "string"
          },
          "jdbc_connection_string": {
            "description": "The jdbc_connection_string of this db_container_deployment.",
            "type": "string"
          },
          "port": {
            "description": "The port of this postgres_container_deployment.",
            "type": "number"
          },
          "jdbc_driver_jar": {
            "description": "The jdbc_driver_jar of this postgres_container_deployment.",
            "type": "string"
          },
          "jdbc_driver_class_name": {
            "description": "The jdbc_driver_class_name of this postgres_container_deployment.",
            "type": "string"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.EnvironmentVariableAssignment"
            }
          },
          "data_files": {
            "description": "The data_files of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DataFile"
            }
          },
          "initial_data": {
            "description": "The initial_data of this db_container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.InitialTableData"
            }
          }
        }
        }
      },
      "laplacian.arch.deployment.component.postgres.PostgresContainerImage": {
        "description": "An entity describing a postgres_container_image.",
        "if": { "properties": {
          "type": { "const": "postgres_container_image" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "postgres_container_image" },
          "name": {
            "description": "The name of this component.",
            "type": "string"
          },
          "type": {
            "description": "The type of this component.",
            "enum":[
              "container_image",
              "elasticsearch_container_image",
              "mysql_container_image",
              "postgres_container_image",
              "springboot2_api_service_container_image"
            ],
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
            "description": "The tags of this component.",
            "type": "string"
            }
          },
          "base_name": {
            "description": "The base_name of this container_image.",
            "type": "string"
          },
          "custom_built": {
            "description": "Defines this container_image is custom_built or not.",
            "type": "boolean"
          },
          "base_name": {
            "description": "The base_name of this postgres_container_image.",
            "type": "string"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_image.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.component.container.EnvironmentVariableDefinition"
            }
          }
        }
        }
      },
      "laplacian.arch.deployment.component.redis.RedisContainerDeployment": {
        "description": "An entity describing a redis_container_deployment.",
        "type": "object",
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "redis_container_deployment" },
          "port": {
            "description": "The port of this redis_container_deployment.",
            "type": "number"
          }
        }
      },
      "laplacian.arch.deployment.component.redis.RedisContainerImage": {
        "description": "An entity describing a redis_container_image.",
        "type": "object",
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "redis_container_image" },
          "base_name": {
            "description": "The base_name of this redis_container_image.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.deployment.component.springboot2_api_service.Springboot2ApiServiceContainerImage": {
        "description": "An entity describing a springboot2_api_service_container_image.",
        "if": { "properties": {
          "type": { "const": "springboot2_api_service_container_image" }
        }},
        "then": {
        "required": [
          "function_model_name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "springboot2_api_service_container_image" },
          "name": {
            "description": "The name of this component.",
            "type": "string"
          },
          "type": {
            "description": "The type of this component.",
            "enum":[
              "container_image",
              "elasticsearch_container_image",
              "mysql_container_image",
              "postgres_container_image",
              "springboot2_api_service_container_image"
            ],
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
            "description": "The tags of this component.",
            "type": "string"
            }
          },
          "base_name": {
            "description": "The base_name of this container_image.",
            "type": "string"
          },
          "custom_built": {
            "description": "Defines this container_image is custom_built or not.",
            "type": "boolean"
          },
          "function_model_name": {
            "description": "The function_model_name of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "container_base_image": {
            "description": "The container_base_image of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "gradle_version": {
            "description": "The gradle_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "jdk_major_version": {
            "description": "The jdk_major_version of this springboot2_api_service_container_image.",
            "enum":[
              "11",
              "14",
              "8"
            ],
            "type": "string"
          },
          "kotlin_version": {
            "description": "The kotlin_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "kotlin_coroutine_version": {
            "description": "The kotlin_coroutine_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "reactor_kotlin_extension_version": {
            "description": "The reactor_kotlin_extension_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "r2dbc_postgres_driver_version": {
            "description": "The r2dbc_postgres_driver_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "oracle_jdbc_driver_version": {
            "description": "The oracle_jdbc_driver_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "postgres_jdbc_driver_version": {
            "description": "The postgres_jdbc_driver_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "mysql_jdbc_driver_version": {
            "description": "The mysql_jdbc_driver_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "spring_version": {
            "description": "The spring_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "reactor_version": {
            "description": "The reactor_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "springboot_version": {
            "description": "The springboot_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "springboot_graphql_webflux_version": {
            "description": "The springboot_graphql_webflux_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "spring_dependency_manager_version": {
            "description": "The spring_dependency_manager_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "graphql_java_version": {
            "description": "The graphql_java_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "graphql_extended_scalar_version": {
            "description": "The graphql_extended_scalar_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "springboot_mybatis_version": {
            "description": "The springboot_mybatis_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "datasource_proxy_version": {
            "description": "The datasource_proxy_version of this springboot2_api_service_container_image.",
            "type": "string"
          },
          "repositories": {
            "type": "array",
            "items": {
            "description": "The repositories of this springboot2_api_service_container_image.",
            "type": "string"
            }
          },
          "environment_variables": {
            "description": "The environment_variables of this container_image.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.component.container.EnvironmentVariableDefinition"
            }
          },
          "additional_libraries": {
            "description": "The additional_libraries of this springboot2_api_service_container_image.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.component.MavenArtifact"
            }
          }
        }
        }
      },
      "laplacian.arch.deployment.component.springboot2_api_service.Springboot2ApiServiceContainerDeployment": {
        "description": "An entity describing a springboot2_api_service_container_deployment.",
        "if": { "properties": {
          "type": { "const": "springboot2_api_service_container_deployment" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "springboot2_api_service_container_deployment" },
          "name": {
            "description": "The name of this deployment.",
            "type": "string"
          },
          "type": {
            "description": "The type of this deployment.",
            "enum":[
              "container_deployment",
              "container_on_gce_instance",
              "container_on_gcp_cloudrun",
              "elasticsearch_container_deployment",
              "springboot2_api_service_container_deployment",
              "db_container_deployment",
              "mysql_container_deployment",
              "postgres_container_deployment"
            ],
            "type": "string"
          },
          "instance_name": {
            "description": "The instance_name of this container_deployment.",
            "type": "string"
          },
          "tag": {
            "description": "The tag of this container_deployment.",
            "type": "string"
          },
          "container_registry": {
            "description": "The container_registry of this container_deployment.",
            "type": "string"
          },
          "use_locally_built_image": {
            "description": "Defines this container_deployment is use_locally_built_image or not.",
            "type": "boolean"
          },
          "http_port": {
            "description": "The http_port of this springboot2_api_service_container_deployment.",
            "type": "number"
          },
          "enable_jmx": {
            "description": "Defines this springboot2_api_service_container_deployment is enable_jmx or not.",
            "type": "boolean"
          },
          "jmx_port": {
            "description": "The jmx_port of this springboot2_api_service_container_deployment.",
            "type": "number"
          },
          "enable_debug": {
            "description": "Defines this springboot2_api_service_container_deployment is enable_debug or not.",
            "type": "boolean"
          },
          "debug_port": {
            "description": "The debug_port of this springboot2_api_service_container_deployment.",
            "type": "number"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.EnvironmentVariableAssignment"
            }
          },
          "data_files": {
            "description": "The data_files of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DataFile"
            }
          },
          "datasources": {
            "description": "The datasources of this springboot2_api_service_container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.DatasourceConfiguration"
            }
          }
        }
        }
      },
      "laplacian.arch.deployment.Dataset": {
        "description": "An entity describing a dataset.",
        "type": "object",
        "required": [
          "name",
          "content"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "dataset" },
          "name": {
            "description": "The name of this dataset.",
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
            "description": "The tags of this dataset.",
            "type": "string"
            }
          },
          "content": {
            "type": "array",
            "items": {
            "$ref": "#/definitions/entities/AnyEntity",
            "description": "The content of this dataset.",
            "type": "object"
            }
          }
        }
      },
      "laplacian.arch.deployment.Deployment": {
        "description": "An entity describing a deployment.",
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "_class_": { "const": "deployment" },
          "name": {
            "description": "The name of this deployment.",
            "type": "string"
          },
          "type": {
            "description": "The type of this deployment.",
            "enum":[
              "container_deployment",
              "container_on_gce_instance",
              "container_on_gcp_cloudrun",
              "elasticsearch_container_deployment",
              "springboot2_api_service_container_deployment",
              "db_container_deployment",
              "mysql_container_deployment",
              "postgres_container_deployment"
            ],
            "type": "string"
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.container.ContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.ContainerOnGceInstance" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.ContainerOnGcpCloudrun" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.elasticsearch.ElasticsearchContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.springboot2_api_service.Springboot2ApiServiceContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DbContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.mysql.MysqlContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.postgres.PostgresContainerDeployment" }
        ]
      },
      "laplacian.arch.deployment.container.ContainerDeployment": {
        "description": "An entity describing a container_deployment.",
        "if": { "properties": {
          "type": { "const": "container_deployment" }
        }},
        "then": {
        "required": [
        ],
        "properties": {
          "_class_": { "const": "container_deployment" },
          "name": {
            "description": "The name of this deployment.",
            "type": "string"
          },
          "type": {
            "description": "The type of this deployment.",
            "enum":[
              "container_deployment",
              "container_on_gce_instance",
              "container_on_gcp_cloudrun",
              "elasticsearch_container_deployment",
              "springboot2_api_service_container_deployment",
              "db_container_deployment",
              "mysql_container_deployment",
              "postgres_container_deployment"
            ],
            "type": "string"
          },
          "instance_name": {
            "description": "The instance_name of this container_deployment.",
            "type": "string"
          },
          "tag": {
            "description": "The tag of this container_deployment.",
            "type": "string"
          },
          "container_registry": {
            "description": "The container_registry of this container_deployment.",
            "type": "string"
          },
          "use_locally_built_image": {
            "description": "Defines this container_deployment is use_locally_built_image or not.",
            "type": "boolean"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.EnvironmentVariableAssignment"
            }
          },
          "data_files": {
            "description": "The data_files of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DataFile"
            }
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.elasticsearch.ElasticsearchContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.springboot2_api_service.Springboot2ApiServiceContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DbContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.mysql.MysqlContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.postgres.PostgresContainerDeployment" }
        ]
        }
      },
      "laplacian.arch.deployment.container.DataFile": {
        "description": "An entity describing a data_file.",
        "type": "object",
        "required": [
          "filename",
          "dataset_name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "data_file" },
          "filename": {
            "description": "The filename of this data_file.",
            "type": "string"
          },
          "dir": {
            "description": "The dir of this data_file.",
            "type": "string"
          },
          "dataset_name": {
            "description": "The dataset_name of this data_file.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.deployment.container.EnvironmentVariableAssignment": {
        "description": "An entity describing a environment_variable_assignment.",
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "environment_variable_assignment" },
          "name": {
            "allOf": [{
            "description": "The name of this environment_variable_assignment.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "value": {
            "description": "The value of this environment_variable_assignment.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.deployment.container.DbContainerDeployment": {
        "description": "An entity describing a db_container_deployment.",
        "if": { "properties": {
          "type": { "const": "db_container_deployment" }
        }},
        "then": {
        "required": [
          "username",
          "jdbc_driver_jar",
          "jdbc_driver_class_name",
          "jdbc_connection_string"
        ],
        "properties": {
          "_class_": { "const": "db_container_deployment" },
          "name": {
            "description": "The name of this deployment.",
            "type": "string"
          },
          "type": {
            "description": "The type of this deployment.",
            "enum":[
              "container_deployment",
              "container_on_gce_instance",
              "container_on_gcp_cloudrun",
              "elasticsearch_container_deployment",
              "springboot2_api_service_container_deployment",
              "db_container_deployment",
              "mysql_container_deployment",
              "postgres_container_deployment"
            ],
            "type": "string"
          },
          "instance_name": {
            "description": "The instance_name of this container_deployment.",
            "type": "string"
          },
          "tag": {
            "description": "The tag of this container_deployment.",
            "type": "string"
          },
          "container_registry": {
            "description": "The container_registry of this container_deployment.",
            "type": "string"
          },
          "use_locally_built_image": {
            "description": "Defines this container_deployment is use_locally_built_image or not.",
            "type": "boolean"
          },
          "username": {
            "description": "The username of this db_container_deployment.",
            "type": "string"
          },
          "password": {
            "description": "The password of this db_container_deployment.",
            "type": "string"
          },
          "database_name": {
            "description": "The database_name of this db_container_deployment.",
            "type": "string"
          },
          "port": {
            "description": "The port of this db_container_deployment.",
            "type": "number"
          },
          "gradle_version": {
            "description": "The gradle_version of this db_container_deployment.",
            "type": "string"
          },
          "flyway_container_base_image": {
            "description": "The flyway_container_base_image of this db_container_deployment.",
            "type": "string"
          },
          "flyway_version": {
            "description": "The flyway_version of this db_container_deployment.",
            "type": "string"
          },
          "jdbc_driver_jar": {
            "description": "The jdbc_driver_jar of this db_container_deployment.",
            "type": "string"
          },
          "jdbc_driver_class_name": {
            "description": "The jdbc_driver_class_name of this db_container_deployment.",
            "type": "string"
          },
          "jdbc_connection_string": {
            "description": "The jdbc_connection_string of this db_container_deployment.",
            "type": "string"
          },
          "environment_variables": {
            "description": "The environment_variables of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.EnvironmentVariableAssignment"
            }
          },
          "data_files": {
            "description": "The data_files of this container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DataFile"
            }
          },
          "initial_data": {
            "description": "The initial_data of this db_container_deployment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.container.InitialTableData"
            }
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.mysql.MysqlContainerDeployment" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.postgres.PostgresContainerDeployment" }
        ]
        }
      },
      "laplacian.arch.deployment.container.InitialTableData": {
        "description": "An entity describing a initial_table_data.",
        "type": "object",
        "required": [
          "dataset_name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "initial_table_data" },
          "table_name": {
            "description": "The table_name of this initial_table_data.",
            "type": "string"
          },
          "table_model_name": {
            "allOf": [{
            "description": "The table_model_name of this initial_table_data.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "schema_name": {
            "description": "The schema_name of this initial_table_data.",
            "type": "string"
          },
          "dataset_name": {
            "description": "The dataset_name of this initial_table_data.",
            "type": "string"
          }
        }
      },
      "laplacian.arch.deployment.ContainerOnGceInstance": {
        "description": "An entity describing a container_on_gce_instance.",
        "if": { "properties": {
          "type": { "const": "container_on_gce_instance" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "container_on_gce_instance" },
          "name": {
            "description": "The name of this deployment.",
            "type": "string"
          },
          "type": {
            "description": "The type of this deployment.",
            "enum":[
              "container_deployment",
              "container_on_gce_instance",
              "container_on_gcp_cloudrun",
              "elasticsearch_container_deployment",
              "springboot2_api_service_container_deployment",
              "db_container_deployment",
              "mysql_container_deployment",
              "postgres_container_deployment"
            ],
            "type": "string"
          },
          "machine_type": {
            "description": "The machine_type of this container_on_gce_instance.",
            "enum":[
              "f1-micro",
              "g1-small"
            ],
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.deployment.ContainerOnGcpCloudrun": {
        "description": "An entity describing a container_on_gcp_cloudrun.",
        "if": { "properties": {
          "type": { "const": "container_on_gcp_cloudrun" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "container_on_gcp_cloudrun" },
          "name": {
            "description": "The name of this deployment.",
            "type": "string"
          },
          "type": {
            "description": "The type of this deployment.",
            "enum":[
              "container_deployment",
              "container_on_gce_instance",
              "container_on_gcp_cloudrun",
              "elasticsearch_container_deployment",
              "springboot2_api_service_container_deployment",
              "db_container_deployment",
              "mysql_container_deployment",
              "postgres_container_deployment"
            ],
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.deployment.datasource.DatasourceConfiguration": {
        "description": "An entity describing a datasource_configuration.",
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "_class_": { "const": "datasource_configuration" },
          "name": {
            "description": "The name of this datasource_configuration.",
            "type": "string"
          },
          "type": {
            "description": "The type of this datasource_configuration.",
            "enum":[
              "jdbc_datasource_configuration",
              "mysql_jdbc",
              "oracle_jdbc",
              "postgres_jdbc"
            ],
            "type": "string"
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.JdbcDatasourceConfiguration" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.MysqlJdbcDatasourceConfiguration" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.OracleJdbcDatasourceConfiguration" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.PostgresJdbcDatasourceConfiguration" }
        ]
      },
      "laplacian.arch.deployment.datasource.JdbcDatasourceConfiguration": {
        "description": "jdbc datasource setting with Hikari connection pool.",
        "if": { "properties": {
          "type": { "const": "jdbc_datasource_configuration" }
        }},
        "then": {
        "required": [
          "jdbc_connection_string",
          "username",
          "password",
          "driver_class_name"
        ],
        "properties": {
          "_class_": { "const": "jdbc_datasource_configuration" },
          "name": {
            "description": "The name of this datasource_configuration.",
            "type": "string"
          },
          "type": {
            "description": "The type of this datasource_configuration.",
            "enum":[
              "jdbc_datasource_configuration",
              "mysql_jdbc",
              "oracle_jdbc",
              "postgres_jdbc"
            ],
            "type": "string"
          },
          "jdbc_connection_string": {
            "description": "The jdbc_connection_string of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "url": {
            "description": "The url of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "username": {
            "description": "The username of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "password": {
            "description": "The password of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "database_name": {
            "description": "The database_name of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "driver_class_name": {
            "description": "The driver_class_name of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "slow_query_threshold_mills": {
            "description": "The slow_query_threshold_mills of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "minimum_idle": {
            "description": "The minimum_idle of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "maximum_pool_size": {
            "description": "The maximum_pool_size of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "idle_timeout": {
            "description": "The idle_timeout of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "max_lifetime": {
            "description": "The max-lifetime of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "connection_timeout": {
            "description": "The connection_timeout of this jdbc_datasource_configuration.",
            "type": "number"
          }
        },
        "allOf": [
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.MysqlJdbcDatasourceConfiguration" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.OracleJdbcDatasourceConfiguration" },
          { "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.PostgresJdbcDatasourceConfiguration" }
        ]
        }
      },
      "laplacian.arch.deployment.datasource.MysqlJdbcDatasourceConfiguration": {
        "description": "An entity describing a mysql_jdbc_datasource_configuration.",
        "if": { "properties": {
          "type": { "const": "mysql_jdbc" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "mysql_jdbc_datasource_configuration" },
          "name": {
            "description": "The name of this datasource_configuration.",
            "type": "string"
          },
          "type": {
            "description": "The type of this datasource_configuration.",
            "enum":[
              "jdbc_datasource_configuration",
              "mysql_jdbc",
              "oracle_jdbc",
              "postgres_jdbc"
            ],
            "type": "string"
          },
          "jdbc_connection_string": {
            "description": "The jdbc_connection_string of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "url": {
            "description": "The url of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "username": {
            "description": "The username of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "password": {
            "description": "The password of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "database_name": {
            "description": "The database_name of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "driver_class_name": {
            "description": "The driver_class_name of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "slow_query_threshold_mills": {
            "description": "The slow_query_threshold_mills of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "minimum_idle": {
            "description": "The minimum_idle of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "maximum_pool_size": {
            "description": "The maximum_pool_size of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "idle_timeout": {
            "description": "The idle_timeout of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "max_lifetime": {
            "description": "The max-lifetime of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "connection_timeout": {
            "description": "The connection_timeout of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "driver_class_name": {
            "description": "The driver_class_name of this mysql_jdbc_datasource_configuration.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.deployment.datasource.OracleJdbcDatasourceConfiguration": {
        "description": "An entity describing a oracle_jdbc_datasource_configuration.",
        "if": { "properties": {
          "type": { "const": "oracle_jdbc" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "oracle_jdbc_datasource_configuration" },
          "name": {
            "description": "The name of this datasource_configuration.",
            "type": "string"
          },
          "type": {
            "description": "The type of this datasource_configuration.",
            "enum":[
              "jdbc_datasource_configuration",
              "mysql_jdbc",
              "oracle_jdbc",
              "postgres_jdbc"
            ],
            "type": "string"
          },
          "jdbc_connection_string": {
            "description": "The jdbc_connection_string of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "url": {
            "description": "The url of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "username": {
            "description": "The username of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "password": {
            "description": "The password of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "database_name": {
            "description": "The database_name of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "driver_class_name": {
            "description": "The driver_class_name of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "slow_query_threshold_mills": {
            "description": "The slow_query_threshold_mills of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "minimum_idle": {
            "description": "The minimum_idle of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "maximum_pool_size": {
            "description": "The maximum_pool_size of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "idle_timeout": {
            "description": "The idle_timeout of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "max_lifetime": {
            "description": "The max-lifetime of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "connection_timeout": {
            "description": "The connection_timeout of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "driver_class_name": {
            "description": "The driver_class_name of this oracle_jdbc_datasource_configuration.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.deployment.datasource.PostgresJdbcDatasourceConfiguration": {
        "description": "An entity describing a postgres_jdbc_datasource_configuration.",
        "if": { "properties": {
          "type": { "const": "postgres_jdbc" }
        }},
        "then": {
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "postgres_jdbc_datasource_configuration" },
          "name": {
            "description": "The name of this datasource_configuration.",
            "type": "string"
          },
          "type": {
            "description": "The type of this datasource_configuration.",
            "enum":[
              "jdbc_datasource_configuration",
              "mysql_jdbc",
              "oracle_jdbc",
              "postgres_jdbc"
            ],
            "type": "string"
          },
          "jdbc_connection_string": {
            "description": "The jdbc_connection_string of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "url": {
            "description": "The url of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "username": {
            "description": "The username of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "password": {
            "description": "The password of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "database_name": {
            "description": "The database_name of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "driver_class_name": {
            "description": "The driver_class_name of this jdbc_datasource_configuration.",
            "type": "string"
          },
          "slow_query_threshold_mills": {
            "description": "The slow_query_threshold_mills of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "minimum_idle": {
            "description": "The minimum_idle of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "maximum_pool_size": {
            "description": "The maximum_pool_size of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "idle_timeout": {
            "description": "The idle_timeout of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "max_lifetime": {
            "description": "The max-lifetime of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "connection_timeout": {
            "description": "The connection_timeout of this jdbc_datasource_configuration.",
            "type": "number"
          },
          "driver_class_name": {
            "description": "The driver_class_name of this postgres_jdbc_datasource_configuration.",
            "type": "string"
          }
        }
        }
      },
      "laplacian.arch.deployment.Environment": {
        "description": "An entity describing a environment.",
        "type": "object",
        "required": [
          "name",
          "tier"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "environment" },
          "name": {
            "description": "The name of this environment.",
            "type": "string"
          },
          "tier": {
            "description": "The tier of this environment.",
            "enum":[
              "local",
              "development",
              "staging",
              "production"
            ],
            "type": "string"
          },
          "uses_locally_built_container_images": {
            "description": "Defines this environment is uses_locally_built_container_images or not.",
            "type": "boolean"
          },
          "uses_gcp": {
            "description": "Defines this environment is uses_gcp or not.",
            "type": "boolean"
          },
          "deployments": {
            "description": "The deployments of this environment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.arch.deployment.Deployment"
            }
          }
        }
      },
      "laplacian.metamodel.Entity": {
        "description": "An entity describing a entity.",
        "type": "object",
        "required": [
          "name",
          "namespace"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "entity" },
          "name": {
            "description": "The name of this entity.",
            "type": "string"
          },
          "namespace": {
            "allOf": [{
            "description": "The namespace of this entity.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/namespace"
            }]
          },
          "identifier": {
            "allOf": [{
            "description": "The identifier of this entity.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "singly_rooted": {
            "description": "If this property is true, there is the \"root\" instance, which is accessible globally.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of this entity.",
            "type": "string"
          },
          "value_object": {
            "description": "Defines this entity is value_object or not.",
            "type": "boolean"
          },
          "class_name": {
            "description": "The class_name of this entity.",
            "type": "string"
          },
          "table_name": {
            "description": "The table_name of this entity.",
            "type": "string"
          },
          "supertype_name": {
            "description": "The supertype_name of this entity.",
            "type": "string"
          },
          "supertype_namespace": {
            "description": "The supertype_namespace of this entity.",
            "type": "string"
          },
          "subtype_key_value": {
            "description": "The value of subtype key that represents this type of entity,\nwhich is used when implementing polymorphism. The name of entity is used by default.",
            "type": "string"
          },
          "deprecated": {
            "description": "Defines this entity is deprecated or not.",
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {
            "description": "examples which explain actual usage of this entity",
            "type": "string"
            }
          },
          "properties": {
            "description": "The properties of this entity (excluding supertypes')",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.metamodel.Property"
            }
          },
          "relationships": {
            "description": "The relationships with other entities (excluding supertypes')",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.metamodel.Relationship"
            }
          },
          "queries": {
            "description": "このエンティティに対するルートクエリ",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.metamodel.Query"
            }
          }
        }
      },
      "laplacian.metamodel.Property": {
        "description": "An entity describing a property.",
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "property" },
          "name": {
            "description": "The name of this property.",
            "type": "string"
          },
          "identifier": {
            "allOf": [{
            "description": "The identifier of this property.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "primary_key": {
            "description": "Defines this property is primary_key or not.",
            "type": "boolean"
          },
          "subtype_key": {
            "description": "Defines this property is subtype_key or not.",
            "type": "boolean"
          },
          "type": {
            "allOf": [{
            "description": "The type of this property.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/basic_type"
            }]
          },
          "domain_type_name": {
            "description": "The name of predefined value domain type for this property.",
            "type": "string"
          },
          "size": {
            "description": "The maximum allowed size of the content of this property.",
            "type": "number"
          },
          "optional": {
            "description": "Defines this property is optional or not.",
            "type": "boolean"
          },
          "description": {
            "description": "The description of this property.",
            "type": "string"
          },
          "default_value": {
            "description": "The default value of this property, which is used when the actual value is null",
            "type": "string"
          },
          "example_values": {
            "type": "array",
            "items": {
            "description": "Kotlin expressions which represent some typical values of this property.",
            "type": "string"
            }
          },
          "table_column_name": {
            "description": "The table_column_name of this property.",
            "type": "string"
          },
          "snippet": {
            "description": "The snippet of this property.",
            "type": "string"
          },
          "multiple": {
            "description": "Defines this property is multiple or not.",
            "type": "boolean"
          },
          "deprecated": {
            "description": "Defines this property is deprecated or not.",
            "type": "boolean"
          },
          "domain": {
            "description": "The domain of this property.",
            "$ref": "#/definitions/entities/laplacian.metamodel.ValueDomain"
          }
        }
      },
      "laplacian.metamodel.PropertyMapping": {
        "description": "An entity describing a property_mapping.",
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "property_mapping" },
          "from": {
            "description": "The from of this property_mapping.",
            "type": "string"
          },
          "to": {
            "description": "The to of this property_mapping.",
            "type": "string"
          },
          "null_value": {
            "description": "The null_value of this property_mapping.",
            "type": "string"
          }
        }
      },
      "laplacian.metamodel.Query": {
        "description": "The queries from which all navigation originates.",
        "type": "object",
        "required": [
          "name",
          "snippet"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "query" },
          "name": {
            "description": "クエリ名称",
            "type": "string"
          },
          "identifier": {
            "allOf": [{
            "description": "識別子",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "type": {
            "description": "結果型",
            "type": "string"
          },
          "result_entity_name": {
            "description": "クエリ結果エンティティ名",
            "type": "string"
          },
          "description": {
            "description": "詳細",
            "type": "string"
          },
          "cardinality": {
            "description": "多重度",
            "type": "string"
          },
          "snippet": {
            "description": "クエリスクリプト",
            "type": "string"
          },
          "deprecated": {
            "description": "Defines this query is deprecated or not.",
            "type": "boolean"
          }
        }
      },
      "laplacian.metamodel.Relationship": {
        "description": "An entity describing a relationship.",
        "type": "object",
        "required": [
          "name",
          "cardinality",
          "reference_entity_name"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "relationship" },
          "name": {
            "description": "The name of this relationship.",
            "type": "string"
          },
          "identifier": {
            "allOf": [{
            "description": "The identifier of this relationship.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/identifier"
            }]
          },
          "cardinality": {
            "description": "The cardinality of this relationship.",
            "enum":[
              "1",
              "0..1",
              "*",
              "1..*"
            ],
            "type": "string"
          },
          "reference_entity_name": {
            "description": "The reference_entity_name of this relationship.",
            "type": "string"
          },
          "reference_entity_namespace": {
            "description": "The reference_entity_namespace of this relationship.",
            "type": "string"
          },
          "aggregate": {
            "description": "Defines this relationship is aggregate or not.",
            "type": "boolean"
          },
          "inherited": {
            "description": "Defines this relationship is inherited or not.",
            "type": "boolean"
          },
          "reverse_of": {
            "description": "The reverse_of of this relationship.",
            "type": "string"
          },
          "description": {
            "description": "The description of this relationship.",
            "type": "string"
          },
          "snippet": {
            "description": "The snippet of this relationship.",
            "type": "string"
          },
          "deprecated": {
            "description": "Defines this relationship is deprecated or not.",
            "type": "boolean"
          },
          "examples": {
            "type": "array",
            "items": {
            "description": "The examples of this relationship.",
            "type": "string"
            }
          },
          "mappings": {
            "description": "The mappings of this relationship.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.metamodel.PropertyMapping"
            }
          }
        }
      },
      "laplacian.metamodel.ValueDomain": {
        "description": "An entity describing a value_domain.",
        "type": "object",
        "required": [
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "value_domain" },
          "pattern": {
            "description": "Allowed pattern in Regular expression.",
            "type": "string"
          },
          "choices": {
            "description": "The list of allowed values.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/entities/laplacian.metamodel.ValueItem"
            }
          }
        }
      },
      "laplacian.metamodel.ValueDomainType": {
        "description": "An entity describing a value_domain_type.",
        "type": "object",
        "required": [
          "name",
          "namespace",
          "type",
          "domain"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "value_domain_type" },
          "name": {
            "description": "The name of this value_domain_type.",
            "type": "string"
          },
          "namespace": {
            "allOf": [{
            "description": "The namespace of this value_domain_type.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/namespace"
            }]
          },
          "type": {
            "allOf": [{
            "description": "The type of this value_domain_type.",
            "type": "string"
            }, {
            "$ref": "#/definitions/value_domain_types/basic_type"
            }]
          },
          "description": {
            "description": "The description of this value_domain_type.",
            "type": "string"
          },
          "domain": {
            "description": "The domain of this value_domain_type.",
            "$ref": "#/definitions/entities/laplacian.metamodel.ValueDomain"
          }
        }
      },
      "laplacian.metamodel.ValueItem": {
        "description": "An entity describing a value_item.",
        "type": "object",
        "required": [
          "value"
        ],
        "additionalProperties": false,
        "properties": {
          "_class_": { "const": "value_item" },
          "value": {
            "description": "The value of this value_item.",
            "type": "string"
          },
          "label": {
            "description": "The label of this value_item.",
            "type": "string"
          },
          "description": {
            "description": "The description of this value_item.",
            "type": "string"
          }
        }
      },
      "AnyEntity": {
        "type": "object",
        "allOf": [{
        "if": { "properties": { "_class_": { "const": "api_call_argument" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.ApiCallArgument" }
        }, {
        "if": { "properties": { "_class_": { "const": "cache_policy" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.cache.CachePolicy" }
        }, {
        "if": { "properties": { "_class_": { "const": "data_file" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.data_file.DataFile" }
        }, {
        "if": { "properties": { "_class_": { "const": "datasource" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.datasource.Datasource" }
        }, {
        "if": { "properties": { "_class_": { "const": "datasource_entry" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.datasource.DatasourceEntry" }
        }, {
        "if": { "properties": { "_class_": { "const": "duration" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.Duration" }
        }, {
        "if": { "properties": { "_class_": { "const": "bucket_script_path" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.BucketScriptPath" }
        }, {
        "if": { "properties": { "_class_": { "const": "field_sort" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.FieldSort" }
        }, {
        "if": { "properties": { "_class_": { "const": "date_histogram_extended_bounds" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramExtendedBounds" }
        }, {
        "if": { "properties": { "_class_": { "const": "date_histogram_interval" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.DateHistogramInterval" }
        }, {
        "if": { "properties": { "_class_": { "const": "aggregate_group_range" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.AggregateGroupRange" }
        }, {
        "if": { "properties": { "_class_": { "const": "keyed_filter" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.KeyedFilter" }
        }, {
        "if": { "properties": { "_class_": { "const": "elasticsearch_aggregate" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.aggregate.ElasticsearchAggregate" }
        }, {
        "if": { "properties": { "_class_": { "const": "elasticsearch_index" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.ElasticsearchIndex" }
        }, {
        "if": { "properties": { "_class_": { "const": "elasticsearch_index_sort" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.ElasticsearchIndexSort" }
        }, {
        "if": { "properties": { "_class_": { "const": "elasticsearch_query_predicate" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQueryPredicate" }
        }, {
        "if": { "properties": { "_class_": { "const": "elasticsearch_query_sort" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.query.ElasticsearchQuerySort" }
        }, {
        "if": { "properties": { "_class_": { "const": "elasticsearch_query" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.elasticsearch.ElasticsearchQuery" }
        }, {
        "if": { "properties": { "_class_": { "const": "graphql_type" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.graphql.GraphqlType" }
        }, {
        "if": { "properties": { "_class_": { "const": "argument_assignment" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.ArgumentAssignment" }
        }, {
        "if": { "properties": { "_class_": { "const": "argument_assignment_value" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.ArgumentAssignmentValue" }
        }, {
        "if": { "properties": { "_class_": { "const": "rest_operation_response" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestOperationResponse" }
        }, {
        "if": { "properties": { "_class_": { "const": "rest_request_parameter" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestRequestParameter" }
        }, {
        "if": { "properties": { "_class_": { "const": "rest_resource" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.rest.RestResource" }
        }, {
        "if": { "properties": { "_class_": { "const": "service" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.Service" }
        }, {
        "if": { "properties": { "_class_": { "const": "elastic_search_client" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.ElasticSearchClient" }
        }, {
        "if": { "properties": { "_class_": { "const": "service_configuration" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.ServiceConfiguration" }
        }, {
        "if": { "properties": { "_class_": { "const": "configuration_binding" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.backend.api.ConfigurationBinding" }
        }, {
        "if": { "properties": { "_class_": { "const": "component" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.Component" }
        }, {
        "if": { "properties": { "_class_": { "const": "environment_variable_definition" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.container.EnvironmentVariableDefinition" }
        }, {
        "if": { "properties": { "_class_": { "const": "configuration_file" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.elasticsearch.ConfigurationFile" }
        }, {
        "if": { "properties": { "_class_": { "const": "maven_artifact" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.MavenArtifact" }
        }, {
        "if": { "properties": { "_class_": { "const": "redis_container_deployment" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.redis.RedisContainerDeployment" }
        }, {
        "if": { "properties": { "_class_": { "const": "redis_container_image" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.component.redis.RedisContainerImage" }
        }, {
        "if": { "properties": { "_class_": { "const": "dataset" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.Dataset" }
        }, {
        "if": { "properties": { "_class_": { "const": "data_file" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.container.DataFile" }
        }, {
        "if": { "properties": { "_class_": { "const": "initial_table_data" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.container.InitialTableData" }
        }, {
        "if": { "properties": { "_class_": { "const": "datasource_configuration" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.datasource.DatasourceConfiguration" }
        }, {
        "if": { "properties": { "_class_": { "const": "environment" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.arch.deployment.Environment" }
        }, {
        "if": { "properties": { "_class_": { "const": "entity" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.metamodel.Entity" }
        }, {
        "if": { "properties": { "_class_": { "const": "value_domain_type" } }},
          "then": { "$ref": "#/definitions/entities/laplacian.metamodel.ValueDomainType" }
        }]
      }
    }
  }
}
